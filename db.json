{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/header.jpg","path":"img/header.jpg","modified":0,"renderable":0},{"_id":"source/img/Andrei.jpg","path":"img/Andrei.jpg","modified":0,"renderable":0},{"_id":"source/img/rsz_andrei.jpg","path":"img/rsz_andrei.jpg","modified":0,"renderable":0},{"_id":"source/img/developer.jpg","path":"img/developer.jpg","modified":0,"renderable":0},{"_id":"source/img/developer.jpeg","path":"img/developer.jpeg","modified":0,"renderable":0},{"_id":"source/img/pcb.png","path":"img/pcb.png","modified":0,"renderable":0},{"_id":"source/img/pcb2.jpg","path":"img/pcb2.jpg","modified":0,"renderable":0},{"_id":"source/img/mean.jpg","path":"img/mean.jpg","modified":0,"renderable":0},{"_id":"source/img/code.jpg","path":"img/code.jpg","modified":0,"renderable":0},{"_id":"source/img/code2.jpg","path":"img/code2.jpg","modified":0,"renderable":0},{"_id":"source/img/mongo.png","path":"img/mongo.png","modified":0,"renderable":0},{"_id":"source/img/express.png","path":"img/express.png","modified":0,"renderable":0},{"_id":"source/img/angular.png","path":"img/angular.png","modified":0,"renderable":0},{"_id":"source/img/nodejs.png","path":"img/nodejs.png","modified":0,"renderable":0},{"_id":"source/img/mean_bg.png","path":"img/mean_bg.png","modified":0,"renderable":0},{"_id":"source/img/mean_code.png","path":"img/mean_code.png","modified":0,"renderable":0},{"_id":"source/img/finished.png","path":"img/finished.png","modified":0,"renderable":0},{"_id":"source/img/test_input.png","path":"img/test_input.png","modified":0,"renderable":0},{"_id":"source/img/debug.png","path":"img/debug.png","modified":0,"renderable":0},{"_id":"themes/Anisina/source/css/blog-style.css","path":"css/blog-style.css","modified":0,"renderable":1},{"_id":"themes/Anisina/source/css/syntax.styl","path":"css/syntax.styl","modified":0,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/blog.js","path":"js/blog.js","modified":0,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/Anisina/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"683474336b38bdbe8154505911fa2627437bf93b","modified":1519851955427},{"_id":"themes/Anisina/.DS_Store","hash":"be5d5c310d80b19adda21b95f325b96bd8b12f8f","modified":1519325416018},{"_id":"themes/Anisina/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1519325416022},{"_id":"themes/Anisina/README.md","hash":"ebde4101f083169abf82f5d9aa6fa34959d5cf11","modified":1519325416022},{"_id":"themes/Anisina/_config.yml","hash":"06bccfc42b143659f59ea78938f00c217ac5574d","modified":1519325416038},{"_id":"themes/Anisina/package.json","hash":"12541fbf56f785e4f5d486a55b4939f3033f625b","modified":1519325416038},{"_id":"themes/Anisina/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1519325415990},{"_id":"themes/Anisina/.git/config","hash":"34da9422497bf112885ff69d41ae9b25aa411184","modified":1519325415990},{"_id":"themes/Anisina/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1519325412782},{"_id":"themes/Anisina/.git/index","hash":"32d9ab01e22c89e1cbd45cd01afcaf82e9cef0af","modified":1520248738144},{"_id":"themes/Anisina/.git/packed-refs","hash":"4fa6fa919e27b1ffaac23772a152c351ca7144e5","modified":1519325415990},{"_id":"themes/Anisina/.idea/Anisina.iml","hash":"4240dabdc746a36bae8a56eeec04a3a3fc59d842","modified":1519325416018},{"_id":"themes/Anisina/.idea/modules.xml","hash":"6f81355dee5b607683bdbd56595a930fb4b83c8b","modified":1519325416022},{"_id":"themes/Anisina/.idea/vcs.xml","hash":"c92f3eb0ad1c70371e177a4d7d741f90af3f902c","modified":1519325416022},{"_id":"themes/Anisina/.idea/workspace.xml","hash":"7c5d920658041056cc34836371895677b507001c","modified":1519325416022},{"_id":"themes/Anisina/Screenshots/mobile-index.jpeg","hash":"cd75f77f5d865d42182e2233e354eeba9f114d98","modified":1519325416022},{"_id":"themes/Anisina/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1519325416038},{"_id":"themes/Anisina/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1519325416038},{"_id":"themes/Anisina/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1519325416038},{"_id":"themes/Anisina/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1519325416038},{"_id":"themes/Anisina/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1519325416038},{"_id":"themes/Anisina/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1519325416038},{"_id":"themes/Anisina/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1519325416038},{"_id":"themes/Anisina/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1519325416038},{"_id":"themes/Anisina/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1519325416038},{"_id":"themes/Anisina/layout/.DS_Store","hash":"f60423538e7d115abf8c86b365e85ad35b418b25","modified":1519325416038},{"_id":"themes/Anisina/layout/404.ejs","hash":"1fe05722bd1b32bbe0ae4e3e880866f935e0ae11","modified":1519325416038},{"_id":"themes/Anisina/layout/about.ejs","hash":"d409109a84aa5c032e1a230c973a91b293765176","modified":1519325416038},{"_id":"themes/Anisina/layout/archive.ejs","hash":"9233a4713382432b315f337adbf1db2b63082971","modified":1519325416038},{"_id":"themes/Anisina/layout/index.ejs","hash":"a94ac678f6b24a46824d45ec058b0ab2105a92c9","modified":1520248738140},{"_id":"themes/Anisina/layout/layout.ejs","hash":"b728827bf3ec55baf96a882032397e6c74c65f34","modified":1519325416038},{"_id":"themes/Anisina/layout/page.ejs","hash":"95bbc74aa6d10cddddd7a5cd5d2a06482f5ea173","modified":1519325416038},{"_id":"themes/Anisina/layout/poetry.ejs","hash":"6c955d419050825e13d39c780d45aceafbf6552d","modified":1519325416038},{"_id":"themes/Anisina/layout/post.ejs","hash":"9427ac91b2bc36c339b528d9a569c038f0b18efa","modified":1520248738140},{"_id":"themes/Anisina/layout/tags.ejs","hash":"ff363455eeddfd389ecf6c5ab090408e1d2ef4e6","modified":1519325416038},{"_id":"themes/Anisina/layout/works.ejs","hash":"1df954e54098cc4845295836374abed870789dcd","modified":1519325416038},{"_id":"themes/Anisina/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1519325412782},{"_id":"themes/Anisina/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1519325412782},{"_id":"themes/Anisina/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1519325412782},{"_id":"themes/Anisina/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1519325412782},{"_id":"themes/Anisina/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1519325412782},{"_id":"themes/Anisina/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1519325412782},{"_id":"themes/Anisina/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1519325412782},{"_id":"themes/Anisina/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1519325412782},{"_id":"themes/Anisina/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1519325412782},{"_id":"themes/Anisina/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1519325412782},{"_id":"themes/Anisina/.git/logs/HEAD","hash":"e2f80dc141ce2da7bc0476818e938f49fb886337","modified":1520248738116},{"_id":"themes/Anisina/.idea/inspectionProfiles/Project_Default.xml","hash":"cb98213afbdfab7620cd4b6ba8801035079b4ae5","modified":1519325416022},{"_id":"themes/Anisina/Screenshots/Anisina.png","hash":"146dd991f55a827a514259e20a51de1e9b07a13d","modified":1519325416022},{"_id":"themes/Anisina/layout/_partial/footer.ejs","hash":"223a29b0154c2dcc5f8a6b6fee67ef78ead266ad","modified":1519325416038},{"_id":"themes/Anisina/layout/_partial/head.ejs","hash":"4e0d96cac503d4e3a5b254d8b8175c392971ce38","modified":1519325416038},{"_id":"themes/Anisina/layout/_partial/nav.ejs","hash":"3baa41d595e951efa1db34dd1789c6f8d3b094da","modified":1519325416038},{"_id":"themes/Anisina/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1519325416038},{"_id":"themes/Anisina/source/css/blog-style.css","hash":"c6830e31138e412c2aa05228c4cd6035063fe651","modified":1519325416038},{"_id":"themes/Anisina/source/css/syntax.styl","hash":"f3f9ff0d1ebc4f7fa18d7e367b2ba2f0899adbd4","modified":1519325416042},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1519325416042},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1519325416042},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1519325416042},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1519325416042},{"_id":"themes/Anisina/source/js/blog.js","hash":"0f805c744ef8a48c0abdd9d204cfc19ee6cafc14","modified":1519325416042},{"_id":"themes/Anisina/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1519325416042},{"_id":"themes/Anisina/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1519325416046},{"_id":"themes/Anisina/source/js/totop.js","hash":"11ede60fccb7c763d6973f80efc78b47c0843746","modified":1519325416046},{"_id":"themes/Anisina/Screenshots/poetry-show.png","hash":"f5fdcd25026a87a0aafeebb1f19cdb3c0a81a666","modified":1519325416038},{"_id":"themes/Anisina/source/css/bootstrap.min.css","hash":"c5db932e115ff97af7b4512b947cde3ba2964db8","modified":1519325416042},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1519325416042},{"_id":"themes/Anisina/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1519325416042},{"_id":"themes/Anisina/.git/objects/pack/pack-e4a802f99c87b7b93ecc93c668d835643a6b3624.idx","hash":"49ef7b2dd1b8927bb5e1ec045803b650142bcbc9","modified":1519325415954},{"_id":"themes/Anisina/.git/refs/heads/master","hash":"ffae89de3fdd4b094ca221452a0920087a775650","modified":1519325415990},{"_id":"themes/Anisina/Screenshots/mobile-post.jpeg","hash":"2081cdff23a9a8c185a48d9aabcc9dc8e77833ec","modified":1519325416026},{"_id":"themes/Anisina/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1519325416042},{"_id":"themes/Anisina/.git/logs/refs/heads/master","hash":"e2f80dc141ce2da7bc0476818e938f49fb886337","modified":1520248738116},{"_id":"themes/Anisina/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1519325415990},{"_id":"themes/Anisina/Screenshots/pc-index.png","hash":"b04094dac75cb656b4244c1dfaf246168a0f8926","modified":1519325416030},{"_id":"themes/Anisina/.git/logs/refs/remotes/origin/HEAD","hash":"e2f80dc141ce2da7bc0476818e938f49fb886337","modified":1520248738116},{"_id":"themes/Anisina/Screenshots/pc-post.png","hash":"cde56c0797b6ff8dd555fb1f8c3f9b21bceaa3be","modified":1519325416034},{"_id":"themes/Anisina/.git/objects/pack/pack-e4a802f99c87b7b93ecc93c668d835643a6b3624.pack","hash":"3f411160be81fe6a9e5c19d7f0755ee3a2f7ac57","modified":1519325415954},{"_id":"source/img/header.jpg","hash":"9db4460d0c60515df6a2087de4c0f7144d23c0e0","modified":1519326341459},{"_id":"source/img/Andrei.jpg","hash":"5b479be640d9a3fcf77aa0a79d53f39c839c1ccc","modified":1519326593198},{"_id":"source/img/rsz_andrei.jpg","hash":"509667d4fd508a88ecd7a0cb5bf8fdd1c3ba0c11","modified":1519328055983},{"_id":"source/img/developer.jpeg","hash":"c26cd8457c66c53710dd1ff751e5573bec497e4e","modified":1519328433058},{"_id":"source/img/developer.jpg","hash":"bf177d976e861d4488ab557178ebb87699666c82","modified":1519328260999},{"_id":"source/img/pcb.png","hash":"84b0c3a20eaa1f4e8e84e4a92cf50bcdb2a032ea","modified":1519328653222},{"_id":"source/img/pcb2.jpg","hash":"115da86adc5301d62c9216a8e24e934621558fb2","modified":1519328955781},{"_id":"source/img/mean.jpg","hash":"54c60ee3fcf12b94d5ca5f4f25266ea5f4418ca2","modified":1519329423564},{"_id":"source/img/code.jpg","hash":"805c82e2ba203f290fced4b03ed67a63025436b7","modified":1519329564640},{"_id":"source/img/code2.jpg","hash":"ca88ff1b40ded647185c0d4c952fcd7b05f7a736","modified":1519329901436},{"_id":"source/img/express.png","hash":"8422d2fe8c487e3958b08c92e20a063dd2d98a19","modified":1519331770218},{"_id":"source/img/mean_bg.png","hash":"2f9ea27df2d5b3fbfafdc1ca070ffe6f745db379","modified":1519332532198},{"_id":"source/img/mongo.png","hash":"3b5418a5c3199a737dc5d78bf6668b2391dd58b5","modified":1519331696962},{"_id":"source/img/nodejs.png","hash":"f0b8ccac0efee3bf16673a9c18ba6e33d24b3f63","modified":1519331878013},{"_id":"source/img/angular.png","hash":"ae60cca824cad49091b27377adc08b13620d5561","modified":1519331856873},{"_id":"source/img/mean_code.png","hash":"bf8142a1f2e54b91a60b4443d24d86fbf9aba272","modified":1519335643271},{"_id":"source/img/finished.png","hash":"0efa33a4b23c0770e7a1dd9f6b68fe98b68621da","modified":1519850168314},{"_id":"source/_posts/1-mean-app.md","hash":"fd38afbe1a85f4c9b409189514ed38058ee5ddc8","modified":1520249931404},{"_id":"source/_posts/0-introduction.md","hash":"616349f145e1c5c5c7fb65818438c824e98aa973","modified":1520250774816},{"_id":"source/_posts/2-mean-docker.md","hash":"9e745c263c43fb1e8f04daf5d0e4abc18370ca55","modified":1520249803812},{"_id":"source/img/test_input","hash":"27aa2965d5207c53e13dc99b124ff5e8cbf5d78f","modified":1519993074700},{"_id":"source/img/test_input.png","hash":"27aa2965d5207c53e13dc99b124ff5e8cbf5d78f","modified":1519993156960},{"_id":"source/img/debug.png","hash":"be293a6ac38d412954ef1b2c5d07ae1ef4e47b2f","modified":1520001540660},{"_id":"public/2018/02/21/0-introduction/index.html","hash":"35d7afb2186fb0041b207b84d662f92be819be32","modified":1520249635708},{"_id":"public/archives/index.html","hash":"eb6bc3463ca2c05dd14f9429eb95be5748653d2d","modified":1520249635708},{"_id":"public/archives/2018/index.html","hash":"2d654b54ebcd8ea0ffbc6c212f8b098a2e23822c","modified":1520249635709},{"_id":"public/archives/2018/02/index.html","hash":"418caa09e718a3d27a6068ba7f5d09673cb7f911","modified":1520249635709},{"_id":"public/archives/2018/03/index.html","hash":"400060b13d9a2f64cf6901f33925aa35f9353a1d","modified":1520249635709},{"_id":"public/tags/MEAN/index.html","hash":"c4d70b41e44096e5fee96c4da5da5203bca63081","modified":1520249635709},{"_id":"public/tags/Angular-5/index.html","hash":"ef8aaedf4a6d060cb3df088480114586a3d667f9","modified":1520249635709},{"_id":"public/tags/Node-js/index.html","hash":"032fcb187f6cc52fd90c1e624918366cc4858fb3","modified":1520249635709},{"_id":"public/tags/Express/index.html","hash":"fd366eb94ac044e3fc7f29167a131a48fec5d9a9","modified":1520249635709},{"_id":"public/2018/03/01/2-mean-docker/index.html","hash":"dbe83b8a31b6c7fd9d380bb4d8fb09e6f8bd58f5","modified":1520249635709},{"_id":"public/2018/02/22/1-mean-app/index.html","hash":"9a058ffd6318fc7ba0402454802e9321da529dbe","modified":1520249635709},{"_id":"public/index.html","hash":"84f5b768d1a3be2fcbf065bad4ca0d66b97817d3","modified":1520249635709},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1520249635715},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1520249635715},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1520249635715},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1520249635715},{"_id":"public/img/developer.jpeg","hash":"c26cd8457c66c53710dd1ff751e5573bec497e4e","modified":1520249635714},{"_id":"public/img/mean.jpg","hash":"54c60ee3fcf12b94d5ca5f4f25266ea5f4418ca2","modified":1520249635714},{"_id":"public/img/mongo.png","hash":"3b5418a5c3199a737dc5d78bf6668b2391dd58b5","modified":1520249635714},{"_id":"public/img/code2.jpg","hash":"ca88ff1b40ded647185c0d4c952fcd7b05f7a736","modified":1520249635714},{"_id":"public/img/express.png","hash":"8422d2fe8c487e3958b08c92e20a063dd2d98a19","modified":1520249635714},{"_id":"public/img/pcb2.jpg","hash":"115da86adc5301d62c9216a8e24e934621558fb2","modified":1520249635714},{"_id":"public/img/nodejs.png","hash":"f0b8ccac0efee3bf16673a9c18ba6e33d24b3f63","modified":1520249635714},{"_id":"public/img/finished.png","hash":"0efa33a4b23c0770e7a1dd9f6b68fe98b68621da","modified":1520249635715},{"_id":"public/img/mean_bg.png","hash":"2f9ea27df2d5b3fbfafdc1ca070ffe6f745db379","modified":1520249635715},{"_id":"public/img/test_input.png","hash":"27aa2965d5207c53e13dc99b124ff5e8cbf5d78f","modified":1520249635715},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1520249635819},{"_id":"public/img/header.jpg","hash":"9db4460d0c60515df6a2087de4c0f7144d23c0e0","modified":1520249635816},{"_id":"public/img/Andrei.jpg","hash":"5b479be640d9a3fcf77aa0a79d53f39c839c1ccc","modified":1520249635817},{"_id":"public/img/rsz_andrei.jpg","hash":"509667d4fd508a88ecd7a0cb5bf8fdd1c3ba0c11","modified":1520249635819},{"_id":"public/img/developer.jpg","hash":"bf177d976e861d4488ab557178ebb87699666c82","modified":1520249635819},{"_id":"public/img/code.jpg","hash":"805c82e2ba203f290fced4b03ed67a63025436b7","modified":1520249635819},{"_id":"public/img/angular.png","hash":"ae60cca824cad49091b27377adc08b13620d5561","modified":1520249635819},{"_id":"public/img/mean_code.png","hash":"bf8142a1f2e54b91a60b4443d24d86fbf9aba272","modified":1520249635819},{"_id":"public/css/syntax.css","hash":"4616879fec214c9cc4f5835615348f0bbeabf2a9","modified":1520249635824},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1520249635824},{"_id":"public/js/blog.js","hash":"0f805c744ef8a48c0abdd9d204cfc19ee6cafc14","modified":1520249635824},{"_id":"public/js/totop.js","hash":"11ede60fccb7c763d6973f80efc78b47c0843746","modified":1520249635825},{"_id":"public/css/blog-style.css","hash":"c6830e31138e412c2aa05228c4cd6035063fe651","modified":1520249635825},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1520249635825},{"_id":"public/css/bootstrap.min.css","hash":"c5db932e115ff97af7b4512b947cde3ba2964db8","modified":1520249635825},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1520249635825},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1520249635825},{"_id":"public/img/debug.png","hash":"be293a6ac38d412954ef1b2c5d07ae1ef4e47b2f","modified":1520249635825},{"_id":"public/img/pcb.png","hash":"84b0c3a20eaa1f4e8e84e4a92cf50bcdb2a032ea","modified":1520249635830},{"_id":"source/favicon.ico","hash":"1f8989d071753f96cbca1464c6269db18b295c28","modified":1520248916952},{"_id":"source/img/favicon.ico","hash":"b29c97add2a1043a5993fe2e74153dde74021470","modified":1520249541596},{"_id":"public/img/favicon.ico","hash":"b29c97add2a1043a5993fe2e74153dde74021470","modified":1520249635715}],"Category":[],"Data":[],"Page":[],"Post":[{"layout":"post","title":"1-Angular 5 MEAN app","subtitle":"Setting up MEAN app with angular cli and express-generator","date":"2018-03-04T11:37:00.000Z","author":"Andrei Sbitnev","header-img":"/img/mean_code.png","cdn":"header-off","_content":"## Introduction\n\n&nbsp; In this tutorial, we will build a base MEAN app using <b>Angular 5</b>, <b>MongoDb</b> and <b>Express.js</b>. The frontend and backend parts will be separated into different directories, and will be run as separate services.<br>\nThere are different possible ways to structure a MEAN app, and separating the frontend from backend has its own advantages:\n<ul>\n<li>The structure is simpler and easier to maintain. With time your app will grow, and the number of packages used in both parts will also grow.</li>\n<li>Most probably different tools will be used for unit testing frontend and backend.</li>\n<li>Easier to build the app using tools like angular cli and express-generator.</li>\n</ul>\nThe base app can later be used to quickly start a new MEAN project, and will be used in further tutorials to build the <b>smart-house</b> project.\n\n## Quick Start\n\nTo build the project you need the [angular cli](https://github.com/angular/angular-cli) and [express-generator](https://expressjs.com/en/starter/generator.html) installed on your operating system.<br>\n\nYou will also need a [mongoDb](https://www.mongodb.com/download-center#community) either installed on your system, or running inside a Docker container. Since we\\`ll be Dockerizing the project in the next tutorial, we will use the container version.<br>\n\nTo run any docker container, [Docker](https://docs.docker.com/install/#time-based-release-schedule) must first be installed on your system. \n>Tip: Use a CE version\n\n>Tip: If you\\`re on a windows environment, be sure to run the command in powershell\n\nTo create and run a mongoDb container, just run the\n```bash\n$ sudo docker container run --name mongodb -d -p 127.0.0.1:27017:27017 mongo\n```\n>TIP: -d - means run detached, -p - port forwarding, mongodb - is the name of your container. You can then start and stop the container by running ``sudo docker container start mongodb`` or ``sudo docker container stop mongodb``.\n\n## Setting up the project\nCreate a new directory <b>smart-house</b> and cd into it.\n\n```bash\nmkdir smart-house && cd smart-house\n```\n\nStart a new Angular 5 project using angular cli\n\n```bash\nng new fe\n```\n\nStart a new express project using express-generator\n\n```bash\nexpress be\n```\n\n## Configuring backend\nOpen up the project in your favorite text editor and open the ~/smart-house/be/app.js file\n\nWe will be using the <b>be</b> app only as a REST api, so we don\\`t need views or view engine. Remove the following lines from the file.\n\n```javascript\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'jade');\n```\n\nAnd the views folder\n\n```bash\nrm -rf be/views\n```\n\nWe also won\\`t be serving any static files or a favicon with the <b>be</b> app, so remove the following lines from the ~/be/app.js file\n\n```javascript\nvar favicon = require('serve-favicon');\n...\napp.use(express.static(path.join(__dirname, 'public')));\n```\n\nAnd the public folder\n\n```bash\nrm -rf be/public\n```\n\nWe also won\\`t be needing the index route, so let\\`s remove it from the project. Remove the following lines from the from the ~/be/app.js file.\n\n```javascript\nvar index = require('./routes/index');\n...\napp.use('/', index);\n```\nAnd the index.js file from the ~/be/routes directory\n\n```bash\nrm be/routes/index.js\n```\n\nWe can also remove the unnecessary dependencies from the ~/be/package.json file.\n```javascript\n\"serve-favicon\": \"~2.4.5\"\n...\n\"jade\": \"~1.11.0\",\n```\n>Tip: Don`t forget to remove the comma from the end of the package.json file.\n\nNow let\\`s install all the dependencies. Just cd into the ~/smart-house/be folder and run \n\n```bash\nnpm install\n```\n\nAlthough it is possible to communicate with mongoDb without any additional packages, we will be using the Mongoose.js library for that purpose. So let\\`s add it to the dependencies. Just cd into the ~/smart-house/be folder and run \n\n```bash\nnpm install --save mongoose\n```\n\nNow let\\`s add mongoose to app.js\n```javascript\nvar mongoose = require('mongoose');\n```\nAnd connect to the database.\n```javascript\nmongoose.connect('mongodb://localhost/test');\n```\nSince our frontend and backend will be running as separate services on different ports, or maybe even on different servers, we need to set appropriate headers, to allow frontend send requests to the backend.\n```javascript\n...\napp.use(cookieParser());\n\napp.use(function(req, res, next) {\n  res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n  res.setHeader(\n    \"Access-Control-Allow-Headers\",\n    \"Origin, X-Requested-With, Content-Type, Accept\"\n  );\n  res.setHeader(\n    \"Access-Control-Allow-Methods\",\n    \"POST, GET, PATCH, DELETE, OPTIONS\"\n  );\n  next();\n});\n\napp.use('/users', users);\n...\n```\nThe final ~/be/app.js file should look like this\n```javascript\nvar express = require('express');\nvar path = require('path');\nvar logger = require('morgan');\nvar cookieParser = require('cookie-parser');\nvar bodyParser = require('body-parser');\nvar mongoose = require('mongoose');\nvar users = require('./routes/users');\n\nvar app = express();\nmongoose.connect('mongodb://localhost/test');\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(cookieParser());\n\napp.use(function(req, res, next) {\n  res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n  res.setHeader(\n    \"Access-Control-Allow-Headers\",\n    \"Origin, X-Requested-With, Content-Type, Accept\"\n  );\n  res.setHeader(\n    \"Access-Control-Allow-Methods\",\n    \"POST, GET, PATCH, DELETE, OPTIONS\"\n  );\n  next();\n});\n\napp.use('/users', users);\n\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  var err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// error handler\napp.use(function(err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // render the error page\n  res.status(err.status || 500);\n  res.render('error');\n});\n\nmodule.exports = app;\n\n```\n## Simple server for the frontend\nIn this project build we are using angular cli, which is a simple and powerful tool for building and running angular applications in development. It comes with a preconfigured testing environment and a dev server, but it is not a good idea to use the dev server in production. Lets next setup a simple production server for angular.<br>\nGo to ~/smart-house/fe and add a new file server.js\n\n```javascript\nvar express = require('express');\nvar path = require('path');\nvar app = express();\n\napp.use(express.static(path.join(__dirname, 'dist')));\n\napp.get('*', function (req, res) {\n    res.sendFile('index.html');\n});\n\napp.listen(4200, function () {\n  console.log('fe running on port 4200');\n});\n```\n\nIn the code above we add a static directory, which will hold all of our static files and most importantly the bundle.js file. By default angular cli will create a bundle in the dist folder of your project.<br>\n\n```javascript\napp.use(express.static(path.join(__dirname, 'dist')));\n```\n\nWe then setup a single endpoint with a wildcard *, which will always get called, no matter what is specified in the url.<br>\n\n```javascript\napp.get('*', function (req, res) {\n    res.sendFile('index.html');\n});\n```\n\nThis is important, because all the routing and error handling in an angular app should be done on the frontend.<br>\n\nFinally we add a server to listen on port 4200, which is the same port used to serve the application by angular dev server.<br>\n\n```javascript\napp.listen(4200, function () {\n  console.log('fe running on port 4200');\n});\n```\n\nLets now modify the <b>fe</b> package.json file to use the newly created server. Go to  ~/smart-house/fe and modify the <b>scripts</b> object in the package.json file. \n\n```json\n...\n\"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"node server.js\",\n    \"dev\": \"ng serve\",\n    \"build\": \"ng build --prod\",\n    \"test\": \"ng test\",\n    \"lint\": \"ng lint\",\n    \"e2e\": \"ng e2e\"\n  },\n...\n```\nTo run the angular dev server use `npm run dev`. To run the app in production, first build it `npm run build`, and then run it `npm start`.\n\n## Testing the MEAN app components working together.\nThe MEAN app is basically setup by now, but it would be great to test if angular, express and mongoDb are correctly set up and can communicate with each other.<br>\nFor this purpose we will add a <b>test</b> component to our angular app, which will have a form with a single input and a button. The form will be sent to the backend, and then saved to mongoDb in the <b>test</b> database. We will also fetch all the values from the <b>test</b> database and display them below the form as a list.<br>\nWe won\\`t be going into further detail about angular or express at this point, because it\\`s not the purpose of this tutorial. All the steps will be shown and described in upcoming tutorials, when we\\`ll be actually building the app.\n\nGo to ~/smart-house/fe directory and run the `ng generate component test` to add a new component to angular app. Below are listed all the files, that need to be added or changed for the test app to run correctly, and what they should contain.<br>\n\n~/smart-house/fe/src/app/app.component.html\n\n```html\n<app-test></app-test>\n```\n\n~/smart-house/fe/src/app/test/test.component.html\n\n```html\n<div>\n  <form #f=\"ngForm\" (ngSubmit)=\"onSubmit(f)\">\n    <label for=\"text\">Text</label>\n    <input type=\"text\" id=\"text\" name=\"text\" ngModel required>\n    <button type=\"submit\" [disabled]=\"!f.valid\">Submit</button>\n  </form>\n  <ul *ngFor=\"let text of textArr\">\n    <li>{{text}}</li>\n  </ul>\n</div>\n```\n\n~/smart-house/fe/src/app/test/test.component.ts\n\n```javascript\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport 'rxjs/Rx';\n\n@Component({\n  selector: 'app-test',\n  templateUrl: './test.component.html',\n  styleUrls: ['./test.component.css']\n})\nexport class TestComponent implements OnInit {\n  @ViewChild('f') testForm: NgForm;\n  public textArr = [];\n  public httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n  getTestData() {\n    this.http.get('http://localhost:3000/test')\n      .subscribe(\n        data => {\n          this.textArr = data['obj'].map(val => val['text']);\n        },\n        error => {\n          console.log(error);\n        }\n      );\n  }\n\n  sendTestData(text) {\n    let body = JSON.stringify(text);\n    this.http.post('http://localhost:3000/test', body, this.httpOptions)\n      .subscribe(\n        data => {\n          this.testForm.resetForm();\n          this.getTestData();\n        },\n        error => {\n          console.log(error)\n        }\n      )\n  }\n\n  constructor(private http: HttpClient) {}\n  onSubmit(form: NgForm) {\n    this.sendTestData(form.value)\n  }\n  ngOnInit() {\n    this.getTestData()\n  }\n}\n```\n~/smart-house/fe/src/app/app.module.ts\n\n```javascript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { TestComponent } from './test/test.component';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    TestComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\nAdd a new directory <b>models</b> in ~/smart-house/be, which will hold the mongoose.js models, and add a <b>test</b> model.<br>\n\n~/smart-house/be/models/test.js\n\n```javascript\nvar mongoose = require('mongoose');\nvar Schema = mongoose.Schema;\n\nvar schema = new Schema({\n    text: {type: String, required: true},\n});\n\nmodule.exports = mongoose.model('Test', schema);\n```\n\nAdd a new routes file test.js\n\n~/smart-house/be/routes/test.js\n\n```javascript\nvar express = require('express');\nvar express = require('express');\nvar router = express.Router();\nvar Test = require('../models/test');\n\nrouter.get('/', function(req, res, next) {\n  Test.find()\n        .exec(function (err, textArr) {\n            if (err) {\n                return res.status(500).json({\n                    title: 'An error occurred',\n                    error: err\n                });\n            }\n            res.status(200).json({\n                message: 'Success',\n                obj: textArr\n            });\n        });\n});\n\nrouter.post('/', function(req, res, next) {\n  var text = req.body.text;\n  var test = new Test({text})\n  test.save();\n  res.status(200).json({\n    message: 'Success',\n  });\n});\n\nmodule.exports = router;\n\n```\nAdd a new <b>test</b> route to be/app.js file\n~/smart-house/be/app.js\n\n```javascript\n...\nvar users = require('./routes/users');\n// load the test model\nvar test = require('./routes/test');\n...\napp.use('/users', users);\n// add test router\napp.use('/test', test);\n...\n\n```\n## Starting the application\nTo test the application, first start the mongodb server\n>Tip: If it is set up in the Docker container, as described above, just run `sudo docker container start mongodb`<br>\n\nStart the backend server, by navigating inside the ~/smarthouse/be and running `npm start`<br>\nOpen up another terminal and start an angular app, by navigating inside the ~/smarthouse/fe and running `npm run dev`<br>\nNow open the browser and go to [http://localhost:4200](http://localhost:4200), you should see a white page with one input field and a disabled \"submit\" button. Enter something in the input field and submit it to the server. The submitted text should appear below the form as a line in a list. You can now refresh the page, and the list should remain unchanged.\n<img src=\"/img/finished.png\">\n\n## Git repository\nThe version of MEAN app built in this tutorial is available in a github repo, on the [1-mean-app-base](https://github.com/andreisbitnev/smart-house/tree/1-mean-app-base) branch. You can git clone it with\n```bash\ngit clone -b 1-mean-app-base https://github.com/andreisbitnev/smart-house.git\n```\n\n## Next up\nIn the next tutorial we will be Dockerizing the base app, so go ahead and check it out [2-MEAN app with Docker](/2018/03/01/2-mean-docker/)","source":"_posts/1-mean-app.md","raw":"---\nlayout: post\ntitle: \"1-Angular 5 MEAN app\"\nsubtitle: \"Setting up MEAN app with angular cli and express-generator\"\ndate: 2018-03-04 13:37\nauthor: \"Andrei Sbitnev\"\nheader-img: \"/img/mean_code.png\"\ncdn: 'header-off'\ntags:\n\t- MEAN\n\t- Angular 5\n\t- Node.js\n\t- Express\n---\n## Introduction\n\n&nbsp; In this tutorial, we will build a base MEAN app using <b>Angular 5</b>, <b>MongoDb</b> and <b>Express.js</b>. The frontend and backend parts will be separated into different directories, and will be run as separate services.<br>\nThere are different possible ways to structure a MEAN app, and separating the frontend from backend has its own advantages:\n<ul>\n<li>The structure is simpler and easier to maintain. With time your app will grow, and the number of packages used in both parts will also grow.</li>\n<li>Most probably different tools will be used for unit testing frontend and backend.</li>\n<li>Easier to build the app using tools like angular cli and express-generator.</li>\n</ul>\nThe base app can later be used to quickly start a new MEAN project, and will be used in further tutorials to build the <b>smart-house</b> project.\n\n## Quick Start\n\nTo build the project you need the [angular cli](https://github.com/angular/angular-cli) and [express-generator](https://expressjs.com/en/starter/generator.html) installed on your operating system.<br>\n\nYou will also need a [mongoDb](https://www.mongodb.com/download-center#community) either installed on your system, or running inside a Docker container. Since we\\`ll be Dockerizing the project in the next tutorial, we will use the container version.<br>\n\nTo run any docker container, [Docker](https://docs.docker.com/install/#time-based-release-schedule) must first be installed on your system. \n>Tip: Use a CE version\n\n>Tip: If you\\`re on a windows environment, be sure to run the command in powershell\n\nTo create and run a mongoDb container, just run the\n```bash\n$ sudo docker container run --name mongodb -d -p 127.0.0.1:27017:27017 mongo\n```\n>TIP: -d - means run detached, -p - port forwarding, mongodb - is the name of your container. You can then start and stop the container by running ``sudo docker container start mongodb`` or ``sudo docker container stop mongodb``.\n\n## Setting up the project\nCreate a new directory <b>smart-house</b> and cd into it.\n\n```bash\nmkdir smart-house && cd smart-house\n```\n\nStart a new Angular 5 project using angular cli\n\n```bash\nng new fe\n```\n\nStart a new express project using express-generator\n\n```bash\nexpress be\n```\n\n## Configuring backend\nOpen up the project in your favorite text editor and open the ~/smart-house/be/app.js file\n\nWe will be using the <b>be</b> app only as a REST api, so we don\\`t need views or view engine. Remove the following lines from the file.\n\n```javascript\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'jade');\n```\n\nAnd the views folder\n\n```bash\nrm -rf be/views\n```\n\nWe also won\\`t be serving any static files or a favicon with the <b>be</b> app, so remove the following lines from the ~/be/app.js file\n\n```javascript\nvar favicon = require('serve-favicon');\n...\napp.use(express.static(path.join(__dirname, 'public')));\n```\n\nAnd the public folder\n\n```bash\nrm -rf be/public\n```\n\nWe also won\\`t be needing the index route, so let\\`s remove it from the project. Remove the following lines from the from the ~/be/app.js file.\n\n```javascript\nvar index = require('./routes/index');\n...\napp.use('/', index);\n```\nAnd the index.js file from the ~/be/routes directory\n\n```bash\nrm be/routes/index.js\n```\n\nWe can also remove the unnecessary dependencies from the ~/be/package.json file.\n```javascript\n\"serve-favicon\": \"~2.4.5\"\n...\n\"jade\": \"~1.11.0\",\n```\n>Tip: Don`t forget to remove the comma from the end of the package.json file.\n\nNow let\\`s install all the dependencies. Just cd into the ~/smart-house/be folder and run \n\n```bash\nnpm install\n```\n\nAlthough it is possible to communicate with mongoDb without any additional packages, we will be using the Mongoose.js library for that purpose. So let\\`s add it to the dependencies. Just cd into the ~/smart-house/be folder and run \n\n```bash\nnpm install --save mongoose\n```\n\nNow let\\`s add mongoose to app.js\n```javascript\nvar mongoose = require('mongoose');\n```\nAnd connect to the database.\n```javascript\nmongoose.connect('mongodb://localhost/test');\n```\nSince our frontend and backend will be running as separate services on different ports, or maybe even on different servers, we need to set appropriate headers, to allow frontend send requests to the backend.\n```javascript\n...\napp.use(cookieParser());\n\napp.use(function(req, res, next) {\n  res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n  res.setHeader(\n    \"Access-Control-Allow-Headers\",\n    \"Origin, X-Requested-With, Content-Type, Accept\"\n  );\n  res.setHeader(\n    \"Access-Control-Allow-Methods\",\n    \"POST, GET, PATCH, DELETE, OPTIONS\"\n  );\n  next();\n});\n\napp.use('/users', users);\n...\n```\nThe final ~/be/app.js file should look like this\n```javascript\nvar express = require('express');\nvar path = require('path');\nvar logger = require('morgan');\nvar cookieParser = require('cookie-parser');\nvar bodyParser = require('body-parser');\nvar mongoose = require('mongoose');\nvar users = require('./routes/users');\n\nvar app = express();\nmongoose.connect('mongodb://localhost/test');\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(cookieParser());\n\napp.use(function(req, res, next) {\n  res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n  res.setHeader(\n    \"Access-Control-Allow-Headers\",\n    \"Origin, X-Requested-With, Content-Type, Accept\"\n  );\n  res.setHeader(\n    \"Access-Control-Allow-Methods\",\n    \"POST, GET, PATCH, DELETE, OPTIONS\"\n  );\n  next();\n});\n\napp.use('/users', users);\n\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  var err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// error handler\napp.use(function(err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // render the error page\n  res.status(err.status || 500);\n  res.render('error');\n});\n\nmodule.exports = app;\n\n```\n## Simple server for the frontend\nIn this project build we are using angular cli, which is a simple and powerful tool for building and running angular applications in development. It comes with a preconfigured testing environment and a dev server, but it is not a good idea to use the dev server in production. Lets next setup a simple production server for angular.<br>\nGo to ~/smart-house/fe and add a new file server.js\n\n```javascript\nvar express = require('express');\nvar path = require('path');\nvar app = express();\n\napp.use(express.static(path.join(__dirname, 'dist')));\n\napp.get('*', function (req, res) {\n    res.sendFile('index.html');\n});\n\napp.listen(4200, function () {\n  console.log('fe running on port 4200');\n});\n```\n\nIn the code above we add a static directory, which will hold all of our static files and most importantly the bundle.js file. By default angular cli will create a bundle in the dist folder of your project.<br>\n\n```javascript\napp.use(express.static(path.join(__dirname, 'dist')));\n```\n\nWe then setup a single endpoint with a wildcard *, which will always get called, no matter what is specified in the url.<br>\n\n```javascript\napp.get('*', function (req, res) {\n    res.sendFile('index.html');\n});\n```\n\nThis is important, because all the routing and error handling in an angular app should be done on the frontend.<br>\n\nFinally we add a server to listen on port 4200, which is the same port used to serve the application by angular dev server.<br>\n\n```javascript\napp.listen(4200, function () {\n  console.log('fe running on port 4200');\n});\n```\n\nLets now modify the <b>fe</b> package.json file to use the newly created server. Go to  ~/smart-house/fe and modify the <b>scripts</b> object in the package.json file. \n\n```json\n...\n\"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"node server.js\",\n    \"dev\": \"ng serve\",\n    \"build\": \"ng build --prod\",\n    \"test\": \"ng test\",\n    \"lint\": \"ng lint\",\n    \"e2e\": \"ng e2e\"\n  },\n...\n```\nTo run the angular dev server use `npm run dev`. To run the app in production, first build it `npm run build`, and then run it `npm start`.\n\n## Testing the MEAN app components working together.\nThe MEAN app is basically setup by now, but it would be great to test if angular, express and mongoDb are correctly set up and can communicate with each other.<br>\nFor this purpose we will add a <b>test</b> component to our angular app, which will have a form with a single input and a button. The form will be sent to the backend, and then saved to mongoDb in the <b>test</b> database. We will also fetch all the values from the <b>test</b> database and display them below the form as a list.<br>\nWe won\\`t be going into further detail about angular or express at this point, because it\\`s not the purpose of this tutorial. All the steps will be shown and described in upcoming tutorials, when we\\`ll be actually building the app.\n\nGo to ~/smart-house/fe directory and run the `ng generate component test` to add a new component to angular app. Below are listed all the files, that need to be added or changed for the test app to run correctly, and what they should contain.<br>\n\n~/smart-house/fe/src/app/app.component.html\n\n```html\n<app-test></app-test>\n```\n\n~/smart-house/fe/src/app/test/test.component.html\n\n```html\n<div>\n  <form #f=\"ngForm\" (ngSubmit)=\"onSubmit(f)\">\n    <label for=\"text\">Text</label>\n    <input type=\"text\" id=\"text\" name=\"text\" ngModel required>\n    <button type=\"submit\" [disabled]=\"!f.valid\">Submit</button>\n  </form>\n  <ul *ngFor=\"let text of textArr\">\n    <li>{{text}}</li>\n  </ul>\n</div>\n```\n\n~/smart-house/fe/src/app/test/test.component.ts\n\n```javascript\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport 'rxjs/Rx';\n\n@Component({\n  selector: 'app-test',\n  templateUrl: './test.component.html',\n  styleUrls: ['./test.component.css']\n})\nexport class TestComponent implements OnInit {\n  @ViewChild('f') testForm: NgForm;\n  public textArr = [];\n  public httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n  getTestData() {\n    this.http.get('http://localhost:3000/test')\n      .subscribe(\n        data => {\n          this.textArr = data['obj'].map(val => val['text']);\n        },\n        error => {\n          console.log(error);\n        }\n      );\n  }\n\n  sendTestData(text) {\n    let body = JSON.stringify(text);\n    this.http.post('http://localhost:3000/test', body, this.httpOptions)\n      .subscribe(\n        data => {\n          this.testForm.resetForm();\n          this.getTestData();\n        },\n        error => {\n          console.log(error)\n        }\n      )\n  }\n\n  constructor(private http: HttpClient) {}\n  onSubmit(form: NgForm) {\n    this.sendTestData(form.value)\n  }\n  ngOnInit() {\n    this.getTestData()\n  }\n}\n```\n~/smart-house/fe/src/app/app.module.ts\n\n```javascript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { TestComponent } from './test/test.component';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    TestComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\nAdd a new directory <b>models</b> in ~/smart-house/be, which will hold the mongoose.js models, and add a <b>test</b> model.<br>\n\n~/smart-house/be/models/test.js\n\n```javascript\nvar mongoose = require('mongoose');\nvar Schema = mongoose.Schema;\n\nvar schema = new Schema({\n    text: {type: String, required: true},\n});\n\nmodule.exports = mongoose.model('Test', schema);\n```\n\nAdd a new routes file test.js\n\n~/smart-house/be/routes/test.js\n\n```javascript\nvar express = require('express');\nvar express = require('express');\nvar router = express.Router();\nvar Test = require('../models/test');\n\nrouter.get('/', function(req, res, next) {\n  Test.find()\n        .exec(function (err, textArr) {\n            if (err) {\n                return res.status(500).json({\n                    title: 'An error occurred',\n                    error: err\n                });\n            }\n            res.status(200).json({\n                message: 'Success',\n                obj: textArr\n            });\n        });\n});\n\nrouter.post('/', function(req, res, next) {\n  var text = req.body.text;\n  var test = new Test({text})\n  test.save();\n  res.status(200).json({\n    message: 'Success',\n  });\n});\n\nmodule.exports = router;\n\n```\nAdd a new <b>test</b> route to be/app.js file\n~/smart-house/be/app.js\n\n```javascript\n...\nvar users = require('./routes/users');\n// load the test model\nvar test = require('./routes/test');\n...\napp.use('/users', users);\n// add test router\napp.use('/test', test);\n...\n\n```\n## Starting the application\nTo test the application, first start the mongodb server\n>Tip: If it is set up in the Docker container, as described above, just run `sudo docker container start mongodb`<br>\n\nStart the backend server, by navigating inside the ~/smarthouse/be and running `npm start`<br>\nOpen up another terminal and start an angular app, by navigating inside the ~/smarthouse/fe and running `npm run dev`<br>\nNow open the browser and go to [http://localhost:4200](http://localhost:4200), you should see a white page with one input field and a disabled \"submit\" button. Enter something in the input field and submit it to the server. The submitted text should appear below the form as a line in a list. You can now refresh the page, and the list should remain unchanged.\n<img src=\"/img/finished.png\">\n\n## Git repository\nThe version of MEAN app built in this tutorial is available in a github repo, on the [1-mean-app-base](https://github.com/andreisbitnev/smart-house/tree/1-mean-app-base) branch. You can git clone it with\n```bash\ngit clone -b 1-mean-app-base https://github.com/andreisbitnev/smart-house.git\n```\n\n## Next up\nIn the next tutorial we will be Dockerizing the base app, so go ahead and check it out [2-MEAN app with Docker](/2018/03/01/2-mean-docker/)","slug":"1-mean-app","published":1,"updated":"2018-03-05T11:38:51.404Z","_id":"cje7koqvl0000h8lweuczghn4","comments":1,"photos":[],"link":"","content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>&nbsp; In this tutorial, we will build a base MEAN app using <b>Angular 5</b>, <b>MongoDb</b> and <b>Express.js</b>. The frontend and backend parts will be separated into different directories, and will be run as separate services.<br><br>There are different possible ways to structure a MEAN app, and separating the frontend from backend has its own advantages:</p>\n<p><ul></ul></p>\n<p><li>The structure is simpler and easier to maintain. With time your app will grow, and the number of packages used in both parts will also grow.</li></p>\n<p><li>Most probably different tools will be used for unit testing frontend and backend.</li></p>\n<p><li>Easier to build the app using tools like angular cli and express-generator.</li><br><br>The base app can later be used to quickly start a new MEAN project, and will be used in further tutorials to build the <b>smart-house</b> project.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><p>To build the project you need the <a href=\"https://github.com/angular/angular-cli\" target=\"_blank\" rel=\"noopener\">angular cli</a> and <a href=\"https://expressjs.com/en/starter/generator.html\" target=\"_blank\" rel=\"noopener\">express-generator</a> installed on your operating system.<br></p>\n<p>You will also need a <a href=\"https://www.mongodb.com/download-center#community\" target=\"_blank\" rel=\"noopener\">mongoDb</a> either installed on your system, or running inside a Docker container. Since we`ll be Dockerizing the project in the next tutorial, we will use the container version.<br></p>\n<p>To run any docker container, <a href=\"https://docs.docker.com/install/#time-based-release-schedule\" target=\"_blank\" rel=\"noopener\">Docker</a> must first be installed on your system. </p>\n<blockquote>\n<p>Tip: Use a CE version</p>\n</blockquote>\n<blockquote>\n<p>Tip: If you`re on a windows environment, be sure to run the command in powershell</p>\n</blockquote>\n<p>To create and run a mongoDb container, just run the<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo docker container run --name mongodb -d -p 127.0.0.1:27017:27017 mongo</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>TIP: -d - means run detached, -p - port forwarding, mongodb - is the name of your container. You can then start and stop the container by running <code>sudo docker container start mongodb</code> or <code>sudo docker container stop mongodb</code>.</p>\n</blockquote>\n<h2 id=\"Setting-up-the-project\"><a href=\"#Setting-up-the-project\" class=\"headerlink\" title=\"Setting up the project\"></a>Setting up the project</h2><p>Create a new directory <b>smart-house</b> and cd into it.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir smart-house &amp;&amp; <span class=\"built_in\">cd</span> smart-house</span><br></pre></td></tr></table></figure>\n<p>Start a new Angular 5 project using angular cli</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ng new fe</span><br></pre></td></tr></table></figure>\n<p>Start a new express project using express-generator</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">express be</span><br></pre></td></tr></table></figure>\n<h2 id=\"Configuring-backend\"><a href=\"#Configuring-backend\" class=\"headerlink\" title=\"Configuring backend\"></a>Configuring backend</h2><p>Open up the project in your favorite text editor and open the ~/smart-house/be/app.js file</p>\n<p>We will be using the <b>be</b> app only as a REST api, so we don`t need views or view engine. Remove the following lines from the file.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// view engine setup</span></span><br><span class=\"line\">app.set(<span class=\"string\">'views'</span>, path.join(__dirname, <span class=\"string\">'views'</span>));</span><br><span class=\"line\">app.set(<span class=\"string\">'view engine'</span>, <span class=\"string\">'jade'</span>);</span><br></pre></td></tr></table></figure>\n<p>And the views folder</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rm -rf be/views</span><br></pre></td></tr></table></figure>\n<p>We also won`t be serving any static files or a favicon with the <b>be</b> app, so remove the following lines from the ~/be/app.js file</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> favicon = <span class=\"built_in\">require</span>(<span class=\"string\">'serve-favicon'</span>);</span><br><span class=\"line\">...</span><br><span class=\"line\">app.use(express.static(path.join(__dirname, <span class=\"string\">'public'</span>)));</span><br></pre></td></tr></table></figure>\n<p>And the public folder</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rm -rf be/public</span><br></pre></td></tr></table></figure>\n<p>We also won`t be needing the index route, so let`s remove it from the project. Remove the following lines from the from the ~/be/app.js file.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> index = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes/index'</span>);</span><br><span class=\"line\">...</span><br><span class=\"line\">app.use(<span class=\"string\">'/'</span>, index);</span><br></pre></td></tr></table></figure>\n<p>And the index.js file from the ~/be/routes directory</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rm be/routes/index.js</span><br></pre></td></tr></table></figure>\n<p>We can also remove the unnecessary dependencies from the ~/be/package.json file.<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"serve-favicon\"</span>: <span class=\"string\">\"~2.4.5\"</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"string\">\"jade\"</span>: <span class=\"string\">\"~1.11.0\"</span>,</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Tip: Don`t forget to remove the comma from the end of the package.json file.</p>\n</blockquote>\n<p>Now let`s install all the dependencies. Just cd into the ~/smart-house/be folder and run </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>Although it is possible to communicate with mongoDb without any additional packages, we will be using the Mongoose.js library for that purpose. So let`s add it to the dependencies. Just cd into the ~/smart-house/be folder and run </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save mongoose</span><br></pre></td></tr></table></figure>\n<p>Now let`s add mongoose to app.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>And connect to the database.<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">mongoose.connect(<span class=\"string\">'mongodb://localhost/test'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>Since our frontend and backend will be running as separate services on different ports, or maybe even on different servers, we need to set appropriate headers, to allow frontend send requests to the backend.<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">app.use(cookieParser());</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.setHeader(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">  res.setHeader(</span><br><span class=\"line\">    <span class=\"string\">\"Access-Control-Allow-Headers\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Origin, X-Requested-With, Content-Type, Accept\"</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  res.setHeader(</span><br><span class=\"line\">    <span class=\"string\">\"Access-Control-Allow-Methods\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"POST, GET, PATCH, DELETE, OPTIONS\"</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"string\">'/users'</span>, users);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p>The final ~/be/app.js file should look like this<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> logger = <span class=\"built_in\">require</span>(<span class=\"string\">'morgan'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> cookieParser = <span class=\"built_in\">require</span>(<span class=\"string\">'cookie-parser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> users = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes/users'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\">mongoose.connect(<span class=\"string\">'mongodb://localhost/test'</span>);</span><br><span class=\"line\">app.use(logger(<span class=\"string\">'dev'</span>));</span><br><span class=\"line\">app.use(bodyParser.json());</span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123; <span class=\"attr\">extended</span>: <span class=\"literal\">false</span> &#125;));</span><br><span class=\"line\">app.use(cookieParser());</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.setHeader(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">  res.setHeader(</span><br><span class=\"line\">    <span class=\"string\">\"Access-Control-Allow-Headers\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Origin, X-Requested-With, Content-Type, Accept\"</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  res.setHeader(</span><br><span class=\"line\">    <span class=\"string\">\"Access-Control-Allow-Methods\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"POST, GET, PATCH, DELETE, OPTIONS\"</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"string\">'/users'</span>, users);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// catch 404 and forward to error handler</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> err = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Not Found'</span>);</span><br><span class=\"line\">  err.status = <span class=\"number\">404</span>;</span><br><span class=\"line\">  next(err);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// error handler</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// set locals, only providing error in development</span></span><br><span class=\"line\">  res.locals.message = err.message;</span><br><span class=\"line\">  res.locals.error = req.app.get(<span class=\"string\">'env'</span>) === <span class=\"string\">'development'</span> ? err : &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// render the error page</span></span><br><span class=\"line\">  res.status(err.status || <span class=\"number\">500</span>);</span><br><span class=\"line\">  res.render(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = app;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Simple-server-for-the-frontend\"><a href=\"#Simple-server-for-the-frontend\" class=\"headerlink\" title=\"Simple server for the frontend\"></a>Simple server for the frontend</h2><p>In this project build we are using angular cli, which is a simple and powerful tool for building and running angular applications in development. It comes with a preconfigured testing environment and a dev server, but it is not a good idea to use the dev server in production. Lets next setup a simple production server for angular.<br><br>Go to ~/smart-house/fe and add a new file server.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(express.static(path.join(__dirname, <span class=\"string\">'dist'</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    res.sendFile(<span class=\"string\">'index.html'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">4200</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'fe running on port 4200'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>In the code above we add a static directory, which will hold all of our static files and most importantly the bundle.js file. By default angular cli will create a bundle in the dist folder of your project.<br></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.use(express.static(path.join(__dirname, <span class=\"string\">'dist'</span>)));</span><br></pre></td></tr></table></figure>\n<p>We then setup a single endpoint with a wildcard *, which will always get called, no matter what is specified in the url.<br></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    res.sendFile(<span class=\"string\">'index.html'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>This is important, because all the routing and error handling in an angular app should be done on the frontend.<br></p>\n<p>Finally we add a server to listen on port 4200, which is the same port used to serve the application by angular dev server.<br></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.listen(<span class=\"number\">4200</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'fe running on port 4200'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Lets now modify the <b>fe</b> package.json file to use the newly created server. Go to  ~/smart-house/fe and modify the <b>scripts</b> object in the package.json file. </p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">    \"ng\": \"ng\",</span><br><span class=\"line\">    \"start\": \"node server.js\",</span><br><span class=\"line\">    \"dev\": \"ng serve\",</span><br><span class=\"line\">    \"build\": \"ng build --prod\",</span><br><span class=\"line\">    \"test\": \"ng test\",</span><br><span class=\"line\">    \"lint\": \"ng lint\",</span><br><span class=\"line\">    \"e2e\": \"ng e2e\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>To run the angular dev server use <code>npm run dev</code>. To run the app in production, first build it <code>npm run build</code>, and then run it <code>npm start</code>.</p>\n<h2 id=\"Testing-the-MEAN-app-components-working-together\"><a href=\"#Testing-the-MEAN-app-components-working-together\" class=\"headerlink\" title=\"Testing the MEAN app components working together.\"></a>Testing the MEAN app components working together.</h2><p>The MEAN app is basically setup by now, but it would be great to test if angular, express and mongoDb are correctly set up and can communicate with each other.<br><br>For this purpose we will add a <b>test</b> component to our angular app, which will have a form with a single input and a button. The form will be sent to the backend, and then saved to mongoDb in the <b>test</b> database. We will also fetch all the values from the <b>test</b> database and display them below the form as a list.<br><br>We won`t be going into further detail about angular or express at this point, because it`s not the purpose of this tutorial. All the steps will be shown and described in upcoming tutorials, when we`ll be actually building the app.</p>\n<p>Go to ~/smart-house/fe directory and run the <code>ng generate component test</code> to add a new component to angular app. Below are listed all the files, that need to be added or changed for the test app to run correctly, and what they should contain.<br></p>\n<p>~/smart-house/fe/src/app/app.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-test</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-test</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>~/smart-house/fe/src/app/test/test.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> #<span class=\"attr\">f</span>=<span class=\"string\">\"ngForm\"</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">\"onSubmit(f)\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"text\"</span>&gt;</span>Text<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">ngModel</span> <span class=\"attr\">required</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> [<span class=\"attr\">disabled</span>]=<span class=\"string\">\"!f.valid\"</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let text of textArr\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>~/smart-house/fe/src/app/test/test.component.ts</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit, ViewChild &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgForm &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/forms'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; HttpClient, HttpHeaders &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common/http'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'rxjs/Rx'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">'app-test'</span>,</span><br><span class=\"line\">  templateUrl: <span class=\"string\">'./test.component.html'</span>,</span><br><span class=\"line\">  styleUrls: [<span class=\"string\">'./test.component.css'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestComponent</span> <span class=\"title\">implements</span> <span class=\"title\">OnInit</span> </span>&#123;</span><br><span class=\"line\">  @ViewChild(<span class=\"string\">'f'</span>) testForm: NgForm;</span><br><span class=\"line\">  public textArr = [];</span><br><span class=\"line\">  public httpOptions = &#123;</span><br><span class=\"line\">    headers: <span class=\"keyword\">new</span> HttpHeaders(&#123; <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span> &#125;)</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  getTestData() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.http.get(<span class=\"string\">'http://localhost:3000/test'</span>)</span><br><span class=\"line\">      .subscribe(</span><br><span class=\"line\">        data =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.textArr = data[<span class=\"string\">'obj'</span>].map(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> val[<span class=\"string\">'text'</span>]);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        error =&gt; &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  sendTestData(text) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> body = <span class=\"built_in\">JSON</span>.stringify(text);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.http.post(<span class=\"string\">'http://localhost:3000/test'</span>, body, <span class=\"keyword\">this</span>.httpOptions)</span><br><span class=\"line\">      .subscribe(</span><br><span class=\"line\">        data =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.testForm.resetForm();</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.getTestData();</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        error =&gt; &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(private http: HttpClient) &#123;&#125;</span><br><span class=\"line\">  onSubmit(form: NgForm) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sendTestData(form.value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ngOnInit() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getTestData()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>~/smart-house/fe/src/app/app.module.ts</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/platform-browser'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; FormsModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/forms'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.component'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; TestComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./test/test.component'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; HttpClientModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common/http'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">@NgModule(&#123;</span><br><span class=\"line\">  declarations: [</span><br><span class=\"line\">    AppComponent,</span><br><span class=\"line\">    TestComponent</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  imports: [</span><br><span class=\"line\">    BrowserModule,</span><br><span class=\"line\">    FormsModule,</span><br><span class=\"line\">    HttpClientModule</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  providers: [],</span><br><span class=\"line\">  bootstrap: [AppComponent]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n<p>Add a new directory <b>models</b> in ~/smart-house/be, which will hold the mongoose.js models, and add a <b>test</b> model.<br></p>\n<p>~/smart-house/be/models/test.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> Schema = mongoose.Schema;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema(&#123;</span><br><span class=\"line\">    text: &#123;<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = mongoose.model(<span class=\"string\">'Test'</span>, schema);</span><br></pre></td></tr></table></figure>\n<p>Add a new routes file test.js</p>\n<p>~/smart-house/be/routes/test.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</span><br><span class=\"line\"><span class=\"keyword\">var</span> Test = <span class=\"built_in\">require</span>(<span class=\"string\">'../models/test'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  Test.find()</span><br><span class=\"line\">        .exec(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, textArr</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> res.status(<span class=\"number\">500</span>).json(&#123;</span><br><span class=\"line\">                    title: <span class=\"string\">'An error occurred'</span>,</span><br><span class=\"line\">                    error: err</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res.status(<span class=\"number\">200</span>).json(&#123;</span><br><span class=\"line\">                message: <span class=\"string\">'Success'</span>,</span><br><span class=\"line\">                obj: textArr</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> text = req.body.text;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> test = <span class=\"keyword\">new</span> Test(&#123;text&#125;)</span><br><span class=\"line\">  test.save();</span><br><span class=\"line\">  res.status(<span class=\"number\">200</span>).json(&#123;</span><br><span class=\"line\">    message: <span class=\"string\">'Success'</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure>\n<p>Add a new <b>test</b> route to be/app.js file<br>~/smart-house/be/app.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">var</span> users = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes/users'</span>);</span><br><span class=\"line\"><span class=\"comment\">// load the test model</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes/test'</span>);</span><br><span class=\"line\">...</span><br><span class=\"line\">app.use(<span class=\"string\">'/users'</span>, users);</span><br><span class=\"line\"><span class=\"comment\">// add test router</span></span><br><span class=\"line\">app.use(<span class=\"string\">'/test'</span>, test);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h2 id=\"Starting-the-application\"><a href=\"#Starting-the-application\" class=\"headerlink\" title=\"Starting the application\"></a>Starting the application</h2><p>To test the application, first start the mongodb server</p>\n<blockquote>\n<p>Tip: If it is set up in the Docker container, as described above, just run <code>sudo docker container start mongodb</code><br></p>\n</blockquote>\n<p>Start the backend server, by navigating inside the ~/smarthouse/be and running <code>npm start</code><br><br>Open up another terminal and start an angular app, by navigating inside the ~/smarthouse/fe and running <code>npm run dev</code><br><br>Now open the browser and go to <a href=\"http://localhost:4200\">http://localhost:4200</a>, you should see a white page with one input field and a disabled “submit” button. Enter something in the input field and submit it to the server. The submitted text should appear below the form as a line in a list. You can now refresh the page, and the list should remain unchanged.<br><img src=\"/img/finished.png\"></p>\n<h2 id=\"Git-repository\"><a href=\"#Git-repository\" class=\"headerlink\" title=\"Git repository\"></a>Git repository</h2><p>The version of MEAN app built in this tutorial is available in a github repo, on the <a href=\"https://github.com/andreisbitnev/smart-house/tree/1-mean-app-base\" target=\"_blank\" rel=\"noopener\">1-mean-app-base</a> branch. You can git clone it with<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> -b 1-mean-app-base https://github.com/andreisbitnev/smart-house.git</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Next-up\"><a href=\"#Next-up\" class=\"headerlink\" title=\"Next up\"></a>Next up</h2><p>In the next tutorial we will be Dockerizing the base app, so go ahead and check it out <a href=\"/2018/03/01/2-mean-docker/\">2-MEAN app with Docker</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>&nbsp; In this tutorial, we will build a base MEAN app using <b>Angular 5</b>, <b>MongoDb</b> and <b>Express.js</b>. The frontend and backend parts will be separated into different directories, and will be run as separate services.<br><br>There are different possible ways to structure a MEAN app, and separating the frontend from backend has its own advantages:</p>\n<p><ul></ul></p>\n<p><li>The structure is simpler and easier to maintain. With time your app will grow, and the number of packages used in both parts will also grow.</li></p>\n<p><li>Most probably different tools will be used for unit testing frontend and backend.</li></p>\n<p><li>Easier to build the app using tools like angular cli and express-generator.</li><br><br>The base app can later be used to quickly start a new MEAN project, and will be used in further tutorials to build the <b>smart-house</b> project.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><p>To build the project you need the <a href=\"https://github.com/angular/angular-cli\" target=\"_blank\" rel=\"noopener\">angular cli</a> and <a href=\"https://expressjs.com/en/starter/generator.html\" target=\"_blank\" rel=\"noopener\">express-generator</a> installed on your operating system.<br></p>\n<p>You will also need a <a href=\"https://www.mongodb.com/download-center#community\" target=\"_blank\" rel=\"noopener\">mongoDb</a> either installed on your system, or running inside a Docker container. Since we`ll be Dockerizing the project in the next tutorial, we will use the container version.<br></p>\n<p>To run any docker container, <a href=\"https://docs.docker.com/install/#time-based-release-schedule\" target=\"_blank\" rel=\"noopener\">Docker</a> must first be installed on your system. </p>\n<blockquote>\n<p>Tip: Use a CE version</p>\n</blockquote>\n<blockquote>\n<p>Tip: If you`re on a windows environment, be sure to run the command in powershell</p>\n</blockquote>\n<p>To create and run a mongoDb container, just run the<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo docker container run --name mongodb -d -p 127.0.0.1:27017:27017 mongo</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>TIP: -d - means run detached, -p - port forwarding, mongodb - is the name of your container. You can then start and stop the container by running <code>sudo docker container start mongodb</code> or <code>sudo docker container stop mongodb</code>.</p>\n</blockquote>\n<h2 id=\"Setting-up-the-project\"><a href=\"#Setting-up-the-project\" class=\"headerlink\" title=\"Setting up the project\"></a>Setting up the project</h2><p>Create a new directory <b>smart-house</b> and cd into it.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir smart-house &amp;&amp; <span class=\"built_in\">cd</span> smart-house</span><br></pre></td></tr></table></figure>\n<p>Start a new Angular 5 project using angular cli</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ng new fe</span><br></pre></td></tr></table></figure>\n<p>Start a new express project using express-generator</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">express be</span><br></pre></td></tr></table></figure>\n<h2 id=\"Configuring-backend\"><a href=\"#Configuring-backend\" class=\"headerlink\" title=\"Configuring backend\"></a>Configuring backend</h2><p>Open up the project in your favorite text editor and open the ~/smart-house/be/app.js file</p>\n<p>We will be using the <b>be</b> app only as a REST api, so we don`t need views or view engine. Remove the following lines from the file.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// view engine setup</span></span><br><span class=\"line\">app.set(<span class=\"string\">'views'</span>, path.join(__dirname, <span class=\"string\">'views'</span>));</span><br><span class=\"line\">app.set(<span class=\"string\">'view engine'</span>, <span class=\"string\">'jade'</span>);</span><br></pre></td></tr></table></figure>\n<p>And the views folder</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rm -rf be/views</span><br></pre></td></tr></table></figure>\n<p>We also won`t be serving any static files or a favicon with the <b>be</b> app, so remove the following lines from the ~/be/app.js file</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> favicon = <span class=\"built_in\">require</span>(<span class=\"string\">'serve-favicon'</span>);</span><br><span class=\"line\">...</span><br><span class=\"line\">app.use(express.static(path.join(__dirname, <span class=\"string\">'public'</span>)));</span><br></pre></td></tr></table></figure>\n<p>And the public folder</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rm -rf be/public</span><br></pre></td></tr></table></figure>\n<p>We also won`t be needing the index route, so let`s remove it from the project. Remove the following lines from the from the ~/be/app.js file.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> index = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes/index'</span>);</span><br><span class=\"line\">...</span><br><span class=\"line\">app.use(<span class=\"string\">'/'</span>, index);</span><br></pre></td></tr></table></figure>\n<p>And the index.js file from the ~/be/routes directory</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rm be/routes/index.js</span><br></pre></td></tr></table></figure>\n<p>We can also remove the unnecessary dependencies from the ~/be/package.json file.<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"serve-favicon\"</span>: <span class=\"string\">\"~2.4.5\"</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"string\">\"jade\"</span>: <span class=\"string\">\"~1.11.0\"</span>,</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Tip: Don`t forget to remove the comma from the end of the package.json file.</p>\n</blockquote>\n<p>Now let`s install all the dependencies. Just cd into the ~/smart-house/be folder and run </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>Although it is possible to communicate with mongoDb without any additional packages, we will be using the Mongoose.js library for that purpose. So let`s add it to the dependencies. Just cd into the ~/smart-house/be folder and run </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save mongoose</span><br></pre></td></tr></table></figure>\n<p>Now let`s add mongoose to app.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>And connect to the database.<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">mongoose.connect(<span class=\"string\">'mongodb://localhost/test'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>Since our frontend and backend will be running as separate services on different ports, or maybe even on different servers, we need to set appropriate headers, to allow frontend send requests to the backend.<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">app.use(cookieParser());</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.setHeader(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">  res.setHeader(</span><br><span class=\"line\">    <span class=\"string\">\"Access-Control-Allow-Headers\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Origin, X-Requested-With, Content-Type, Accept\"</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  res.setHeader(</span><br><span class=\"line\">    <span class=\"string\">\"Access-Control-Allow-Methods\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"POST, GET, PATCH, DELETE, OPTIONS\"</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"string\">'/users'</span>, users);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p>The final ~/be/app.js file should look like this<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> logger = <span class=\"built_in\">require</span>(<span class=\"string\">'morgan'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> cookieParser = <span class=\"built_in\">require</span>(<span class=\"string\">'cookie-parser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> users = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes/users'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\">mongoose.connect(<span class=\"string\">'mongodb://localhost/test'</span>);</span><br><span class=\"line\">app.use(logger(<span class=\"string\">'dev'</span>));</span><br><span class=\"line\">app.use(bodyParser.json());</span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123; <span class=\"attr\">extended</span>: <span class=\"literal\">false</span> &#125;));</span><br><span class=\"line\">app.use(cookieParser());</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.setHeader(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">  res.setHeader(</span><br><span class=\"line\">    <span class=\"string\">\"Access-Control-Allow-Headers\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Origin, X-Requested-With, Content-Type, Accept\"</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  res.setHeader(</span><br><span class=\"line\">    <span class=\"string\">\"Access-Control-Allow-Methods\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"POST, GET, PATCH, DELETE, OPTIONS\"</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"string\">'/users'</span>, users);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// catch 404 and forward to error handler</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> err = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Not Found'</span>);</span><br><span class=\"line\">  err.status = <span class=\"number\">404</span>;</span><br><span class=\"line\">  next(err);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// error handler</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// set locals, only providing error in development</span></span><br><span class=\"line\">  res.locals.message = err.message;</span><br><span class=\"line\">  res.locals.error = req.app.get(<span class=\"string\">'env'</span>) === <span class=\"string\">'development'</span> ? err : &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// render the error page</span></span><br><span class=\"line\">  res.status(err.status || <span class=\"number\">500</span>);</span><br><span class=\"line\">  res.render(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = app;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Simple-server-for-the-frontend\"><a href=\"#Simple-server-for-the-frontend\" class=\"headerlink\" title=\"Simple server for the frontend\"></a>Simple server for the frontend</h2><p>In this project build we are using angular cli, which is a simple and powerful tool for building and running angular applications in development. It comes with a preconfigured testing environment and a dev server, but it is not a good idea to use the dev server in production. Lets next setup a simple production server for angular.<br><br>Go to ~/smart-house/fe and add a new file server.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(express.static(path.join(__dirname, <span class=\"string\">'dist'</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    res.sendFile(<span class=\"string\">'index.html'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">4200</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'fe running on port 4200'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>In the code above we add a static directory, which will hold all of our static files and most importantly the bundle.js file. By default angular cli will create a bundle in the dist folder of your project.<br></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.use(express.static(path.join(__dirname, <span class=\"string\">'dist'</span>)));</span><br></pre></td></tr></table></figure>\n<p>We then setup a single endpoint with a wildcard *, which will always get called, no matter what is specified in the url.<br></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    res.sendFile(<span class=\"string\">'index.html'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>This is important, because all the routing and error handling in an angular app should be done on the frontend.<br></p>\n<p>Finally we add a server to listen on port 4200, which is the same port used to serve the application by angular dev server.<br></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.listen(<span class=\"number\">4200</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'fe running on port 4200'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Lets now modify the <b>fe</b> package.json file to use the newly created server. Go to  ~/smart-house/fe and modify the <b>scripts</b> object in the package.json file. </p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">    \"ng\": \"ng\",</span><br><span class=\"line\">    \"start\": \"node server.js\",</span><br><span class=\"line\">    \"dev\": \"ng serve\",</span><br><span class=\"line\">    \"build\": \"ng build --prod\",</span><br><span class=\"line\">    \"test\": \"ng test\",</span><br><span class=\"line\">    \"lint\": \"ng lint\",</span><br><span class=\"line\">    \"e2e\": \"ng e2e\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>To run the angular dev server use <code>npm run dev</code>. To run the app in production, first build it <code>npm run build</code>, and then run it <code>npm start</code>.</p>\n<h2 id=\"Testing-the-MEAN-app-components-working-together\"><a href=\"#Testing-the-MEAN-app-components-working-together\" class=\"headerlink\" title=\"Testing the MEAN app components working together.\"></a>Testing the MEAN app components working together.</h2><p>The MEAN app is basically setup by now, but it would be great to test if angular, express and mongoDb are correctly set up and can communicate with each other.<br><br>For this purpose we will add a <b>test</b> component to our angular app, which will have a form with a single input and a button. The form will be sent to the backend, and then saved to mongoDb in the <b>test</b> database. We will also fetch all the values from the <b>test</b> database and display them below the form as a list.<br><br>We won`t be going into further detail about angular or express at this point, because it`s not the purpose of this tutorial. All the steps will be shown and described in upcoming tutorials, when we`ll be actually building the app.</p>\n<p>Go to ~/smart-house/fe directory and run the <code>ng generate component test</code> to add a new component to angular app. Below are listed all the files, that need to be added or changed for the test app to run correctly, and what they should contain.<br></p>\n<p>~/smart-house/fe/src/app/app.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-test</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-test</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>~/smart-house/fe/src/app/test/test.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> #<span class=\"attr\">f</span>=<span class=\"string\">\"ngForm\"</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">\"onSubmit(f)\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"text\"</span>&gt;</span>Text<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">ngModel</span> <span class=\"attr\">required</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> [<span class=\"attr\">disabled</span>]=<span class=\"string\">\"!f.valid\"</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let text of textArr\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>~/smart-house/fe/src/app/test/test.component.ts</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit, ViewChild &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgForm &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/forms'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; HttpClient, HttpHeaders &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common/http'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'rxjs/Rx'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">'app-test'</span>,</span><br><span class=\"line\">  templateUrl: <span class=\"string\">'./test.component.html'</span>,</span><br><span class=\"line\">  styleUrls: [<span class=\"string\">'./test.component.css'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestComponent</span> <span class=\"title\">implements</span> <span class=\"title\">OnInit</span> </span>&#123;</span><br><span class=\"line\">  @ViewChild(<span class=\"string\">'f'</span>) testForm: NgForm;</span><br><span class=\"line\">  public textArr = [];</span><br><span class=\"line\">  public httpOptions = &#123;</span><br><span class=\"line\">    headers: <span class=\"keyword\">new</span> HttpHeaders(&#123; <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span> &#125;)</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  getTestData() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.http.get(<span class=\"string\">'http://localhost:3000/test'</span>)</span><br><span class=\"line\">      .subscribe(</span><br><span class=\"line\">        data =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.textArr = data[<span class=\"string\">'obj'</span>].map(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> val[<span class=\"string\">'text'</span>]);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        error =&gt; &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  sendTestData(text) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> body = <span class=\"built_in\">JSON</span>.stringify(text);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.http.post(<span class=\"string\">'http://localhost:3000/test'</span>, body, <span class=\"keyword\">this</span>.httpOptions)</span><br><span class=\"line\">      .subscribe(</span><br><span class=\"line\">        data =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.testForm.resetForm();</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.getTestData();</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        error =&gt; &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(private http: HttpClient) &#123;&#125;</span><br><span class=\"line\">  onSubmit(form: NgForm) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sendTestData(form.value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ngOnInit() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getTestData()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>~/smart-house/fe/src/app/app.module.ts</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/platform-browser'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; FormsModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/forms'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.component'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; TestComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./test/test.component'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; HttpClientModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common/http'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">@NgModule(&#123;</span><br><span class=\"line\">  declarations: [</span><br><span class=\"line\">    AppComponent,</span><br><span class=\"line\">    TestComponent</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  imports: [</span><br><span class=\"line\">    BrowserModule,</span><br><span class=\"line\">    FormsModule,</span><br><span class=\"line\">    HttpClientModule</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  providers: [],</span><br><span class=\"line\">  bootstrap: [AppComponent]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n<p>Add a new directory <b>models</b> in ~/smart-house/be, which will hold the mongoose.js models, and add a <b>test</b> model.<br></p>\n<p>~/smart-house/be/models/test.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> Schema = mongoose.Schema;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema(&#123;</span><br><span class=\"line\">    text: &#123;<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = mongoose.model(<span class=\"string\">'Test'</span>, schema);</span><br></pre></td></tr></table></figure>\n<p>Add a new routes file test.js</p>\n<p>~/smart-house/be/routes/test.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</span><br><span class=\"line\"><span class=\"keyword\">var</span> Test = <span class=\"built_in\">require</span>(<span class=\"string\">'../models/test'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  Test.find()</span><br><span class=\"line\">        .exec(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, textArr</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> res.status(<span class=\"number\">500</span>).json(&#123;</span><br><span class=\"line\">                    title: <span class=\"string\">'An error occurred'</span>,</span><br><span class=\"line\">                    error: err</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res.status(<span class=\"number\">200</span>).json(&#123;</span><br><span class=\"line\">                message: <span class=\"string\">'Success'</span>,</span><br><span class=\"line\">                obj: textArr</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> text = req.body.text;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> test = <span class=\"keyword\">new</span> Test(&#123;text&#125;)</span><br><span class=\"line\">  test.save();</span><br><span class=\"line\">  res.status(<span class=\"number\">200</span>).json(&#123;</span><br><span class=\"line\">    message: <span class=\"string\">'Success'</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure>\n<p>Add a new <b>test</b> route to be/app.js file<br>~/smart-house/be/app.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">var</span> users = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes/users'</span>);</span><br><span class=\"line\"><span class=\"comment\">// load the test model</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes/test'</span>);</span><br><span class=\"line\">...</span><br><span class=\"line\">app.use(<span class=\"string\">'/users'</span>, users);</span><br><span class=\"line\"><span class=\"comment\">// add test router</span></span><br><span class=\"line\">app.use(<span class=\"string\">'/test'</span>, test);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h2 id=\"Starting-the-application\"><a href=\"#Starting-the-application\" class=\"headerlink\" title=\"Starting the application\"></a>Starting the application</h2><p>To test the application, first start the mongodb server</p>\n<blockquote>\n<p>Tip: If it is set up in the Docker container, as described above, just run <code>sudo docker container start mongodb</code><br></p>\n</blockquote>\n<p>Start the backend server, by navigating inside the ~/smarthouse/be and running <code>npm start</code><br><br>Open up another terminal and start an angular app, by navigating inside the ~/smarthouse/fe and running <code>npm run dev</code><br><br>Now open the browser and go to <a href=\"http://localhost:4200\">http://localhost:4200</a>, you should see a white page with one input field and a disabled “submit” button. Enter something in the input field and submit it to the server. The submitted text should appear below the form as a line in a list. You can now refresh the page, and the list should remain unchanged.<br><img src=\"/img/finished.png\"></p>\n<h2 id=\"Git-repository\"><a href=\"#Git-repository\" class=\"headerlink\" title=\"Git repository\"></a>Git repository</h2><p>The version of MEAN app built in this tutorial is available in a github repo, on the <a href=\"https://github.com/andreisbitnev/smart-house/tree/1-mean-app-base\" target=\"_blank\" rel=\"noopener\">1-mean-app-base</a> branch. You can git clone it with<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> -b 1-mean-app-base https://github.com/andreisbitnev/smart-house.git</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Next-up\"><a href=\"#Next-up\" class=\"headerlink\" title=\"Next up\"></a>Next up</h2><p>In the next tutorial we will be Dockerizing the base app, so go ahead and check it out <a href=\"/2018/03/01/2-mean-docker/\">2-MEAN app with Docker</a></p>\n"},{"layout":"post","title":"0-Introduction","subtitle":"What this blog is all about","date":"2018-03-03T10:00:00.000Z","author":"Andrei Sbitnev","header-img":"/img/mean_code.png","cdn":"header-off","_content":"## Introduction\n\n&nbsp; This blog is all about web development! The goal is to provide a step-by-step guide on building and deploying a <b>smart-house</b> project using JavaScript as the main programming language on both frontend and backend.<br>\nEach post is a separate tutorial on some particular topic, and it starts where the last post left off. There will be a separate branch in a [github repository](https://github.com/andreisbitnev/smart-house) for each topic/post, so it is easy to continue at any step.\n>Tip: for example for this post there is a branch [0-introduction](https://github.com/andreisbitnev/smart-house/tree/0-introduction), so you can clone it with `git clone https://github.com/andreisbitnev/smart-house.git`\n\n## Software stack\n<ul>\n    <li>\n        During the development as well as in production all the services will be <b>Dockerized</b>, so most of the examples presented in this course will be built using tools available on linux environment.\n    </li>\n    <li>\n        The application to manage the devices by the end user will be built using the <b>MEAN</b> stack <b>(Mongo, Express, Angular 5, Node.js)</b>\n    </li>\n    <li>\n        Wifi relay switches powered by the ESP8266 chip, will be programmed using <b>Mongoose OS</b>, and will also be executing JavaScript\n    </li>\n    <li>\n        IOT devices will be communicating with the server through secure MQTT protocol. The <b>Mosquitto</b> MQTT broker will be user for this purpose\n    </li>\n</ul>\n\n## Next up\nGo ahead and check out the next post about building the project skeleton with angular cli and express generator [Angular 5 MEAN app](/2018/02/22/1-mean-app/)","source":"_posts/0-introduction.md","raw":"---\nlayout: post\ntitle: \"0-Introduction\"\nsubtitle: \"What this blog is all about\"\ndate: 2018-03-03 12:00\nauthor: \"Andrei Sbitnev\"\nheader-img: \"/img/mean_code.png\"\ncdn: 'header-off'\ntags:\n---\n## Introduction\n\n&nbsp; This blog is all about web development! The goal is to provide a step-by-step guide on building and deploying a <b>smart-house</b> project using JavaScript as the main programming language on both frontend and backend.<br>\nEach post is a separate tutorial on some particular topic, and it starts where the last post left off. There will be a separate branch in a [github repository](https://github.com/andreisbitnev/smart-house) for each topic/post, so it is easy to continue at any step.\n>Tip: for example for this post there is a branch [0-introduction](https://github.com/andreisbitnev/smart-house/tree/0-introduction), so you can clone it with `git clone https://github.com/andreisbitnev/smart-house.git`\n\n## Software stack\n<ul>\n    <li>\n        During the development as well as in production all the services will be <b>Dockerized</b>, so most of the examples presented in this course will be built using tools available on linux environment.\n    </li>\n    <li>\n        The application to manage the devices by the end user will be built using the <b>MEAN</b> stack <b>(Mongo, Express, Angular 5, Node.js)</b>\n    </li>\n    <li>\n        Wifi relay switches powered by the ESP8266 chip, will be programmed using <b>Mongoose OS</b>, and will also be executing JavaScript\n    </li>\n    <li>\n        IOT devices will be communicating with the server through secure MQTT protocol. The <b>Mosquitto</b> MQTT broker will be user for this purpose\n    </li>\n</ul>\n\n## Next up\nGo ahead and check out the next post about building the project skeleton with angular cli and express generator [Angular 5 MEAN app](/2018/02/22/1-mean-app/)","slug":"0-introduction","published":1,"updated":"2018-03-05T11:53:33.996Z","_id":"cje8cg8gv0009vslwjopgxie6","comments":1,"photos":[],"link":"","content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>&nbsp; This blog is all about web development! The goal is to provide a step-by-step guide on building and deploying a <b>smart-house</b> project using JavaScript as the main programming language on both frontend and backend.<br><br>Each post is a separate tutorial on some particular topic, and it starts where the last post left off. There will be a separate branch in a <a href=\"https://github.com/andreisbitnev/smart-house\" target=\"_blank\" rel=\"noopener\">github repository</a> for each topic/post, so it is easy to continue at any step.</p>\n<blockquote>\n<p>Tip: for example for this post there is a branch <a href=\"https://github.com/andreisbitnev/smart-house/tree/0-introduction\" target=\"_blank\" rel=\"noopener\">0-introduction</a>, so you can clone it with <code>git clone https://github.com/andreisbitnev/smart-house.git</code></p>\n</blockquote>\n<h2 id=\"Software-stack\"><a href=\"#Software-stack\" class=\"headerlink\" title=\"Software stack\"></a>Software stack</h2><ul><br>    <li><br>        During the development as well as in production all the services will be <b>Dockerized</b>, so most of the examples presented in this course will be built using tools available on linux environment.<br>    </li><br>    <li><br>        The application to manage the devices by the end user will be built using the <b>MEAN</b> stack <b>(Mongo, Express, Angular 5, Node.js)</b><br>    </li><br>    <li><br>        Wifi relay switches powered by the ESP8266 chip, will be programmed using <b>Mongoose OS</b>, and will also be executing JavaScript<br>    </li><br>    <li><br>        IOT devices will be communicating with the server through secure MQTT protocol. The <b>Mosquitto</b> MQTT broker will be user for this purpose<br>    </li><br></ul>\n\n<h2 id=\"Next-up\"><a href=\"#Next-up\" class=\"headerlink\" title=\"Next up\"></a>Next up</h2><p>Go ahead and check out the next post about building the project skeleton with angular cli and express generator <a href=\"/2018/02/22/1-mean-app/\">Angular 5 MEAN app</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>&nbsp; This blog is all about web development! The goal is to provide a step-by-step guide on building and deploying a <b>smart-house</b> project using JavaScript as the main programming language on both frontend and backend.<br><br>Each post is a separate tutorial on some particular topic, and it starts where the last post left off. There will be a separate branch in a <a href=\"https://github.com/andreisbitnev/smart-house\" target=\"_blank\" rel=\"noopener\">github repository</a> for each topic/post, so it is easy to continue at any step.</p>\n<blockquote>\n<p>Tip: for example for this post there is a branch <a href=\"https://github.com/andreisbitnev/smart-house/tree/0-introduction\" target=\"_blank\" rel=\"noopener\">0-introduction</a>, so you can clone it with <code>git clone https://github.com/andreisbitnev/smart-house.git</code></p>\n</blockquote>\n<h2 id=\"Software-stack\"><a href=\"#Software-stack\" class=\"headerlink\" title=\"Software stack\"></a>Software stack</h2><ul><br>    <li><br>        During the development as well as in production all the services will be <b>Dockerized</b>, so most of the examples presented in this course will be built using tools available on linux environment.<br>    </li><br>    <li><br>        The application to manage the devices by the end user will be built using the <b>MEAN</b> stack <b>(Mongo, Express, Angular 5, Node.js)</b><br>    </li><br>    <li><br>        Wifi relay switches powered by the ESP8266 chip, will be programmed using <b>Mongoose OS</b>, and will also be executing JavaScript<br>    </li><br>    <li><br>        IOT devices will be communicating with the server through secure MQTT protocol. The <b>Mosquitto</b> MQTT broker will be user for this purpose<br>    </li><br></ul>\n\n<h2 id=\"Next-up\"><a href=\"#Next-up\" class=\"headerlink\" title=\"Next up\"></a>Next up</h2><p>Go ahead and check out the next post about building the project skeleton with angular cli and express generator <a href=\"/2018/02/22/1-mean-app/\">Angular 5 MEAN app</a></p>\n"},{"layout":"post","title":"2-MEAN app with Docker","subtitle":"Dockerizing the MEAN app","date":"2018-03-09T10:00:00.000Z","author":"Andrei Sbitnev","header-img":"/img/mean_code.png","cdn":"header-off","_content":"## Introduction\n\n&nbsp; In this tutorial, we will configure Docker containers for the MEAN app, we created in the previous blog post [1-Angular 5 MEAN app](/2018/02/22/1-mean-app/). Using Docker in development as well as in production has a lot of advantages:\n<ul>\n<li>The project will run in the same environment during development as well as in production. No matter what hardware or operating system is used, Docker containers will behave the same on all machines.</li>\n<li>Deployment process will be a lot quicker and less painfull</li>\n<li>Setting up the project on the developers machine takes only a few minutes, and as easy as running one command in the terminal</li>\n</ul>\n\n## Quick Start\n\nTo run any docker container, [Docker](https://docs.docker.com/install/#time-based-release-schedule) must first be installed on your system. Just choose your operating system, and follow the installation instructions. Use the CE version!<br>\nIn this tutorial we will also use the docker-compose, if you\\`re using <b>Docker for windows</b> or <b>Docker for mac</b>, it is already installed with the package. Linux users should install it separately, here\\`s a [link](https://docs.docker.com/compose/install/)<br>\n\nAs stated above, we will be building Docker containers for the MEAN app created in the previous tutorial. To get the app clone it from the [github repo](https://github.com/andreisbitnev/smart-house/tree/1-mean-app-base) \n```bash\ngit clone -b 1-mean-app-base https://github.com/andreisbitnev/smart-house.git\n```\n## Small changes to the code\nBefore we start creating our docker containers, we need to make some changes to the code. Go to ~/smart-house/be/app.js and modify the mongodb connection url\n```javascript\n...\nvar app = express();\n\nmongoose.connect('mongodb://mongodb/test');\n...\n```\n>Tip: The right way to communicate between the containers is by using their names instead of an ip address. Although it is possible for example to send a request from frontend to backend using `localhost:3000/test`, but it is usually not possible to access the database containers in the same way.\n\nWe also need to modify the ~/smart-house/fe/package.json file. Change the dev script to\n\n```javascript\n...\n\"dev\": \"ng serve --host 0.0.0.0\",\n...\n```\nThe default host for angular cli dev server is `localhost`, here we set it to `0.0.0.0`, for the app to be accessible outside the container.<br>\n\nLet\\`s add a dev script to the backend package.json file<br>\n~/smart-house/be/package.json\n```json\n...\n\"scripts\": {\n    \"start\": \"node ./bin/www\",\n    \"dev\": \"nodemon ./bin/www\"\n  },\n...\n```\n\n## Dockerfile for the backend app\nDocker containers are built from images. You can either use an already existing image, or create your own. To create a new image, Dockerfile is used, which is basically a blueprint for the image. There we specify all the tools needed to be set up for the app to run, as well as copy all the project files.\nLet\\`s first create a Dockerfile for the backend app. Go to ~/smart-house/be and create a new Docker file<br>\n~/smart-house/be/Dockerfile\n```Dockerfile\nFROM node:9-alpine\n\nWORKDIR /usr/src/project/\nCOPY . .\nRUN rm Dockerfile\nRUN npm install -g nodemon \\\n    && npm install\nEXPOSE 9229\nCMD [\"npm\", \"run\", \"dev\"]\n```\nLet\\`s go line by line and see what each line do.\n```Dockerfile\nFROM node:9-alpine\n```\nHere we specify the base image for the new image. `node` - is the name of the image, and `9-alpine` is the tag, or the version so to say.\nHere we are using the alpine distribution of linux, which has node.js version 9.6.1 installed on it. \n>Tip: alpine - is a very lightweight linux distribution, which doesn\\`t have a lot of tools installed, like for example ubuntu has. But it has everything needed to run an express or angular app, and the image weighs only <b>68 MB</b>, compared to ubuntu image - <b>679 MB</b>\n\n>Tip: You can check out other available images to build from on [hub.docker.com](https://hub.docker.com/).\n\n```Dockerfile\nWORKDIR /usr/src/project/\n```\nHere we set up the working directory for the project inside the Docker image. It is basically the same as `cd /usr/src/project/`, but the directories will get created if they don\\`t exist.\n```Dockerfile\nCOPY . .\n```\nHere we copy everything from the directory Dockerfile is in (~/smart-house/be) to the working directory in the image (/usr/src/project/)\n```Dockerfile\nRUN rm Dockerfile\n```\nHere we just remove the unnecessary files. Another option is not to copy everything in the previous step, but copy only the needed files one by one.\n```Dockerfile\nRUN npm install -g nodemon \\\n    && npm install\n```\nHere we install [nodemon](https://github.com/remy/nodemon) globally to our image, to later use it in development. And we also install the package dependencies.\n```Dockerfile\nEXPOSE 9229\n```\nHere we expose the 9229 port, which can then be used to debug the application.\n```Dockerfile\nCMD [\"nodemon\", \"bin/www\"]\n```\nThis is the command, that will be run when a container, built from the image, starts. We want to run the server with nodemon to be able to make changes, without the need to restart the container<br>\n\n## Dockerfile for the frontend app\nLet\\`s now create a Dockerfile for the frontend app. Go to ~/smart-house/fe and create a new Docker file. It will be basically the same as the previous one, with some small changes.<br>\n~/smart-house/fe/Dockerfile\n```Dockerfile\nFROM node:9-alpine\n\nWORKDIR /usr/src/project/\nCOPY . .\nRUN rm Dockerfile \\\n    && npm install -g @angular/cli --unsafe \\\n    && npm install\nEXPOSE 4200\nCMD [\"npm\", \"run\", \"dev\"]\n```\nWe don\\`t need a nodemon for an angular app, but we do need angular cli\n```Dockerfile\n&& npm install -g @angular/cli --unsafe \\\n```\n>Tip: the --unsafe tag is a workaround, needed to install the angular cli inside the Docker image. There is an open [bug report](https://github.com/angular/angular-cli/issues/7389) on the issue. This workaround is the cleanest from currently suggested.\n\n```Dockerfile\nEXPOSE 4200\n```\nHere we expose the port, that will be used to serve the application.\n\n## Building the images\nWe can now build our images, and create Docker containers from them. We will also need a mongodb container to store our data. If you have not yet created it in the previous tutorial, do it by running\n```bash\nsudo docker container run --name mongodb -d mongo\n```\n>Tip: If you\\`re on a windows environment, be sure to run the command in powershell\n\nHere we simply specify the name of the container - <b>mongodb</b>, and the image to build it from - <b>mongo</b>, by default the <b>:latest</b> tag is used, so it\\`s the same as mongo:latest. We also specify that the process should run in detached mode <b>-d</b>, and setup port forwarding with <b>-p</b></br>\nNow let\\`s build a backend image.\n```bash\nsudo docker image build -t sm-be ./be\n```\nI\\`m running this command from ~/smarthouse directory, so I specify the relative path `./be` to the Dockerfile directory I want to build from. `-t sm-be` - is the Tag, or the name of the image.\n>Tip: Now you can run the `sudo docker image ls` to see the list of all available images, and sm-be should be there\n\nLet\\`s do the same for the frontend image\n```bash\nsudo docker image build -t sm-fe ./fe\n```\n\n## Creating containers\nTo create the backend app container run the next command\n```bash\nsudo docker container run -d --name smart-house-be -p 3000:3000 --link mongodb:mongodb -v \"$(pwd)\"/be:/usr/src/project -v /usr/src/project/node_modules sm-be\n```\n`-d` - means detached mode, `--name smart-house-be` - is the name of the container, `-p 3000:3000` - port forwarding, our network port : containers port.<br> \n`-v \"$(pwd)\"/be:/usr/src/project` - here we map our local volume ~/smart-house/be to containers /usr/src/project. So now whatever changes we make in our project folder will automatically apply to container.<br>\n`-v /usr/src/project/node_modules` - here we specify a new volume for node_modules. In the previous step we mapped our local project folder to the project folder inside the container. Since node_modules is also located inside the project folder, the container will look for it in our local environment. This is not the best choise, because our local environment might be different from the one inside the container. So we want node_modules to be maintained inside the container, and we don\\`t even need it in our local environment.<br>\n`--link mongodb:mongodb` is a link to the mongodb container.\n`sm-be` is the name of the image we want to create the container from.\n\nLet\\`s now create the frontend app container\n```bash\nsudo docker container run --name smart-house-fe -p 4200:4200 -d -v \"$(pwd)\"/fe:/usr/src/project -v /usr/src/project/node_modules sm-fe\n```\nNow open in the browser [localhost:4200](http://localhost:4200/), you should see the app working.\n<img src=\"/img/finished.png\">\nYou can now make any changes in the angular app, and the dev server will update them automatically. You can also make changes in the backend app, and the nodemon will update them automatically.\n\n>Tip: to start and stop any comtainer just use `sudo docker container start <container_name>` or `sudo docker container stop <container_name>`\n\n## Using docker-compose\nWe have succesfully built our images and created containers for our MEAN app, but now we need to start and stop them one by one. Also if for example other members of the team were to use our new build, they would have to enter all of those commands listed above manually. It would be great to automate the process. That\\`s where <b>docker-compose</b> comes in. Docker-compose simplifies the build process of group of containers, that are used together. Go to ~/smart-house directory and create a docker-compose.yml file<br>\n~/smart-house/docker-compose.yml\n```yml\nversion: '2'\nservices:\n  mongodb:\n    image: mongo\n    volumes:\n      - mongo-volume:/home/node\n  smart-house-fe:\n    build: ./fe\n    command: npm run dev\n    volumes:\n      - ./fe:/usr/src/project\n      - /usr/src/project/node_modules\n    ports:\n      - 4200:4200\n  smart-house-be:\n    build: ./be\n    command: npm run dev\n    volumes:\n      - ./be:/usr/src/project\n      - /usr/src/project/node_modules\n    ports:\n      - 3000:3000\n      - 9229:9229\nvolumes:\n  mongo-volume:\n```\nFrom the first look, you can see that the file basically lists everything we specified in the scripts above, but now all the information is structured. Lets go line by line and see what each line does.\n`version: '2'` - the version of docker-compose file, the latest is 3.1, \n`services` - contains all the containers, that need to be created,\n`mongodb, smart-house-fe, smart-house-be` - the names of containers,\n`image` - the base image to use,\n`volumes` - a list of volumes for each container. As you may have noticed, we added a volume to our mongodb container called `mongo-volume`. It is always a good idea to add a named volume to the database. If you later on remove the container the volume will still exist, and you can attach it to a new container. This way the data stored in the database will not be lost,\n`build` - relative path to the Dockerfile, from which the container should be built,\n`command` - although we specify a command to run on container startup, we can rewrite it here.\n`volumes` - a list of named volumes to be created.<br>\nLet\\`s now remove the containers and images we previously created and build everything again using just one command. Remove the smart-house-be container\n```bash\nsudo docker container rm -v -f smart-house-be\n```\n>Tip: `-v` - is to remove also the volumes attached to the container, `-f` - is to force it, if container is still running\n\nand the smart-house-fe\n```bash\nsudo docker container rm -v -f smart-house-fe\n```\nand the mongodb\n```bash\nsudo docker container rm -v -f mongodb\n```\nNow the images<br>\n`sudo docker image rm sm-be` and `sudo docker image rm sm-fe`<br>\n<!-- Before we build everything once again, let\\`s make one small change to che project. You may have noticed, that in the docker-compose.yml we no longer open up the 3000 port on the backend container. It is a better practice to call one container from another using their names, and not exposing ports to the outer network. This way our backend container won\\`t be accessible outside the  -->\nTo build everything again just go to ~/smart-house and run `sudo docker-compose up`. Everything should be working as before\n\n>Tip: You can also run it in detached mode `sudo docker-compose up -d`. To stop all the containers, run `sudo docker-compose down`. To remove all the volumes attached to the containers, run `sudo docker-compose down -v`\n\n## Debugging node in visual studio code.\nThere is a lot of tools out there for debugging, but since I usually use visual studio code, I also debug the application with it.<br>\nFirst we need to add a debug script to our backend package.json \n```json\n...\n\"scripts\": {\n    \"start\": \"node ./bin/www\",\n    \"dev\": \"nodemon ./bin/www\",\n    \"debug\": \"node --inspect-brk=0.0.0.0:9229 ./bin/www\"\n  },\n...\n```\n\nNext, lets change the command that starts the backend app in docker-compose file<br>\n~/smart-house/docker-compose.yml\n```yml\n...\nsmart-house-be:\n    build: ./be\n    command: npm run debug\n    volumes:\n      - ./be:/usr/src/project\n...\n```\n Finally lets add a configuration file to our visual studio code<br>\n ~/smart-house/.vscode/launch.json\n```json\n{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"docker\",\n            \"type\": \"node\",\n            \"request\": \"attach\",\n            \"port\": 9229,\n            \"address\": \"127.0.0.1\",\n            \"restart\": true,\n            \"sourceMaps\": false,\n            \"localRoot\": \"${workspaceRoot}/be\",\n            \"remoteRoot\": \"/usr/src/project\",\n            \"outFiles\": [],\n            \"protocol\": \"inspector\"\n        }\n    ]\n}\n```\nNext do the `sudo docker-compose down`, and `sudo docker-compose up`, and start a debugging session in your visual studio code.\n<img src=\"/img/debug.png\">\n\n## Git repository\nThe Dockerized version of the app built in this tutorial is available in a github repo, on the [2-mean-app-docker](https://github.com/andreisbitnev/smart-house/tree/2-mean-app-docker) branch. You can git clone it with\n```bash\ngit clone -b 2-mean-app-docker https://github.com/andreisbitnev/smart-house.git\n```","source":"_posts/2-mean-docker.md","raw":"---\nlayout: post\ntitle: \"2-MEAN app with Docker\"\nsubtitle: \"Dockerizing the MEAN app\"\ndate: 2018-03-09 12:00\nauthor: \"Andrei Sbitnev\"\nheader-img: \"/img/mean_code.png\"\ncdn: 'header-off'\ntags:\n  - Docker\n\t- MEAN\n---\n## Introduction\n\n&nbsp; In this tutorial, we will configure Docker containers for the MEAN app, we created in the previous blog post [1-Angular 5 MEAN app](/2018/02/22/1-mean-app/). Using Docker in development as well as in production has a lot of advantages:\n<ul>\n<li>The project will run in the same environment during development as well as in production. No matter what hardware or operating system is used, Docker containers will behave the same on all machines.</li>\n<li>Deployment process will be a lot quicker and less painfull</li>\n<li>Setting up the project on the developers machine takes only a few minutes, and as easy as running one command in the terminal</li>\n</ul>\n\n## Quick Start\n\nTo run any docker container, [Docker](https://docs.docker.com/install/#time-based-release-schedule) must first be installed on your system. Just choose your operating system, and follow the installation instructions. Use the CE version!<br>\nIn this tutorial we will also use the docker-compose, if you\\`re using <b>Docker for windows</b> or <b>Docker for mac</b>, it is already installed with the package. Linux users should install it separately, here\\`s a [link](https://docs.docker.com/compose/install/)<br>\n\nAs stated above, we will be building Docker containers for the MEAN app created in the previous tutorial. To get the app clone it from the [github repo](https://github.com/andreisbitnev/smart-house/tree/1-mean-app-base) \n```bash\ngit clone -b 1-mean-app-base https://github.com/andreisbitnev/smart-house.git\n```\n## Small changes to the code\nBefore we start creating our docker containers, we need to make some changes to the code. Go to ~/smart-house/be/app.js and modify the mongodb connection url\n```javascript\n...\nvar app = express();\n\nmongoose.connect('mongodb://mongodb/test');\n...\n```\n>Tip: The right way to communicate between the containers is by using their names instead of an ip address. Although it is possible for example to send a request from frontend to backend using `localhost:3000/test`, but it is usually not possible to access the database containers in the same way.\n\nWe also need to modify the ~/smart-house/fe/package.json file. Change the dev script to\n\n```javascript\n...\n\"dev\": \"ng serve --host 0.0.0.0\",\n...\n```\nThe default host for angular cli dev server is `localhost`, here we set it to `0.0.0.0`, for the app to be accessible outside the container.<br>\n\nLet\\`s add a dev script to the backend package.json file<br>\n~/smart-house/be/package.json\n```json\n...\n\"scripts\": {\n    \"start\": \"node ./bin/www\",\n    \"dev\": \"nodemon ./bin/www\"\n  },\n...\n```\n\n## Dockerfile for the backend app\nDocker containers are built from images. You can either use an already existing image, or create your own. To create a new image, Dockerfile is used, which is basically a blueprint for the image. There we specify all the tools needed to be set up for the app to run, as well as copy all the project files.\nLet\\`s first create a Dockerfile for the backend app. Go to ~/smart-house/be and create a new Docker file<br>\n~/smart-house/be/Dockerfile\n```Dockerfile\nFROM node:9-alpine\n\nWORKDIR /usr/src/project/\nCOPY . .\nRUN rm Dockerfile\nRUN npm install -g nodemon \\\n    && npm install\nEXPOSE 9229\nCMD [\"npm\", \"run\", \"dev\"]\n```\nLet\\`s go line by line and see what each line do.\n```Dockerfile\nFROM node:9-alpine\n```\nHere we specify the base image for the new image. `node` - is the name of the image, and `9-alpine` is the tag, or the version so to say.\nHere we are using the alpine distribution of linux, which has node.js version 9.6.1 installed on it. \n>Tip: alpine - is a very lightweight linux distribution, which doesn\\`t have a lot of tools installed, like for example ubuntu has. But it has everything needed to run an express or angular app, and the image weighs only <b>68 MB</b>, compared to ubuntu image - <b>679 MB</b>\n\n>Tip: You can check out other available images to build from on [hub.docker.com](https://hub.docker.com/).\n\n```Dockerfile\nWORKDIR /usr/src/project/\n```\nHere we set up the working directory for the project inside the Docker image. It is basically the same as `cd /usr/src/project/`, but the directories will get created if they don\\`t exist.\n```Dockerfile\nCOPY . .\n```\nHere we copy everything from the directory Dockerfile is in (~/smart-house/be) to the working directory in the image (/usr/src/project/)\n```Dockerfile\nRUN rm Dockerfile\n```\nHere we just remove the unnecessary files. Another option is not to copy everything in the previous step, but copy only the needed files one by one.\n```Dockerfile\nRUN npm install -g nodemon \\\n    && npm install\n```\nHere we install [nodemon](https://github.com/remy/nodemon) globally to our image, to later use it in development. And we also install the package dependencies.\n```Dockerfile\nEXPOSE 9229\n```\nHere we expose the 9229 port, which can then be used to debug the application.\n```Dockerfile\nCMD [\"nodemon\", \"bin/www\"]\n```\nThis is the command, that will be run when a container, built from the image, starts. We want to run the server with nodemon to be able to make changes, without the need to restart the container<br>\n\n## Dockerfile for the frontend app\nLet\\`s now create a Dockerfile for the frontend app. Go to ~/smart-house/fe and create a new Docker file. It will be basically the same as the previous one, with some small changes.<br>\n~/smart-house/fe/Dockerfile\n```Dockerfile\nFROM node:9-alpine\n\nWORKDIR /usr/src/project/\nCOPY . .\nRUN rm Dockerfile \\\n    && npm install -g @angular/cli --unsafe \\\n    && npm install\nEXPOSE 4200\nCMD [\"npm\", \"run\", \"dev\"]\n```\nWe don\\`t need a nodemon for an angular app, but we do need angular cli\n```Dockerfile\n&& npm install -g @angular/cli --unsafe \\\n```\n>Tip: the --unsafe tag is a workaround, needed to install the angular cli inside the Docker image. There is an open [bug report](https://github.com/angular/angular-cli/issues/7389) on the issue. This workaround is the cleanest from currently suggested.\n\n```Dockerfile\nEXPOSE 4200\n```\nHere we expose the port, that will be used to serve the application.\n\n## Building the images\nWe can now build our images, and create Docker containers from them. We will also need a mongodb container to store our data. If you have not yet created it in the previous tutorial, do it by running\n```bash\nsudo docker container run --name mongodb -d mongo\n```\n>Tip: If you\\`re on a windows environment, be sure to run the command in powershell\n\nHere we simply specify the name of the container - <b>mongodb</b>, and the image to build it from - <b>mongo</b>, by default the <b>:latest</b> tag is used, so it\\`s the same as mongo:latest. We also specify that the process should run in detached mode <b>-d</b>, and setup port forwarding with <b>-p</b></br>\nNow let\\`s build a backend image.\n```bash\nsudo docker image build -t sm-be ./be\n```\nI\\`m running this command from ~/smarthouse directory, so I specify the relative path `./be` to the Dockerfile directory I want to build from. `-t sm-be` - is the Tag, or the name of the image.\n>Tip: Now you can run the `sudo docker image ls` to see the list of all available images, and sm-be should be there\n\nLet\\`s do the same for the frontend image\n```bash\nsudo docker image build -t sm-fe ./fe\n```\n\n## Creating containers\nTo create the backend app container run the next command\n```bash\nsudo docker container run -d --name smart-house-be -p 3000:3000 --link mongodb:mongodb -v \"$(pwd)\"/be:/usr/src/project -v /usr/src/project/node_modules sm-be\n```\n`-d` - means detached mode, `--name smart-house-be` - is the name of the container, `-p 3000:3000` - port forwarding, our network port : containers port.<br> \n`-v \"$(pwd)\"/be:/usr/src/project` - here we map our local volume ~/smart-house/be to containers /usr/src/project. So now whatever changes we make in our project folder will automatically apply to container.<br>\n`-v /usr/src/project/node_modules` - here we specify a new volume for node_modules. In the previous step we mapped our local project folder to the project folder inside the container. Since node_modules is also located inside the project folder, the container will look for it in our local environment. This is not the best choise, because our local environment might be different from the one inside the container. So we want node_modules to be maintained inside the container, and we don\\`t even need it in our local environment.<br>\n`--link mongodb:mongodb` is a link to the mongodb container.\n`sm-be` is the name of the image we want to create the container from.\n\nLet\\`s now create the frontend app container\n```bash\nsudo docker container run --name smart-house-fe -p 4200:4200 -d -v \"$(pwd)\"/fe:/usr/src/project -v /usr/src/project/node_modules sm-fe\n```\nNow open in the browser [localhost:4200](http://localhost:4200/), you should see the app working.\n<img src=\"/img/finished.png\">\nYou can now make any changes in the angular app, and the dev server will update them automatically. You can also make changes in the backend app, and the nodemon will update them automatically.\n\n>Tip: to start and stop any comtainer just use `sudo docker container start <container_name>` or `sudo docker container stop <container_name>`\n\n## Using docker-compose\nWe have succesfully built our images and created containers for our MEAN app, but now we need to start and stop them one by one. Also if for example other members of the team were to use our new build, they would have to enter all of those commands listed above manually. It would be great to automate the process. That\\`s where <b>docker-compose</b> comes in. Docker-compose simplifies the build process of group of containers, that are used together. Go to ~/smart-house directory and create a docker-compose.yml file<br>\n~/smart-house/docker-compose.yml\n```yml\nversion: '2'\nservices:\n  mongodb:\n    image: mongo\n    volumes:\n      - mongo-volume:/home/node\n  smart-house-fe:\n    build: ./fe\n    command: npm run dev\n    volumes:\n      - ./fe:/usr/src/project\n      - /usr/src/project/node_modules\n    ports:\n      - 4200:4200\n  smart-house-be:\n    build: ./be\n    command: npm run dev\n    volumes:\n      - ./be:/usr/src/project\n      - /usr/src/project/node_modules\n    ports:\n      - 3000:3000\n      - 9229:9229\nvolumes:\n  mongo-volume:\n```\nFrom the first look, you can see that the file basically lists everything we specified in the scripts above, but now all the information is structured. Lets go line by line and see what each line does.\n`version: '2'` - the version of docker-compose file, the latest is 3.1, \n`services` - contains all the containers, that need to be created,\n`mongodb, smart-house-fe, smart-house-be` - the names of containers,\n`image` - the base image to use,\n`volumes` - a list of volumes for each container. As you may have noticed, we added a volume to our mongodb container called `mongo-volume`. It is always a good idea to add a named volume to the database. If you later on remove the container the volume will still exist, and you can attach it to a new container. This way the data stored in the database will not be lost,\n`build` - relative path to the Dockerfile, from which the container should be built,\n`command` - although we specify a command to run on container startup, we can rewrite it here.\n`volumes` - a list of named volumes to be created.<br>\nLet\\`s now remove the containers and images we previously created and build everything again using just one command. Remove the smart-house-be container\n```bash\nsudo docker container rm -v -f smart-house-be\n```\n>Tip: `-v` - is to remove also the volumes attached to the container, `-f` - is to force it, if container is still running\n\nand the smart-house-fe\n```bash\nsudo docker container rm -v -f smart-house-fe\n```\nand the mongodb\n```bash\nsudo docker container rm -v -f mongodb\n```\nNow the images<br>\n`sudo docker image rm sm-be` and `sudo docker image rm sm-fe`<br>\n<!-- Before we build everything once again, let\\`s make one small change to che project. You may have noticed, that in the docker-compose.yml we no longer open up the 3000 port on the backend container. It is a better practice to call one container from another using their names, and not exposing ports to the outer network. This way our backend container won\\`t be accessible outside the  -->\nTo build everything again just go to ~/smart-house and run `sudo docker-compose up`. Everything should be working as before\n\n>Tip: You can also run it in detached mode `sudo docker-compose up -d`. To stop all the containers, run `sudo docker-compose down`. To remove all the volumes attached to the containers, run `sudo docker-compose down -v`\n\n## Debugging node in visual studio code.\nThere is a lot of tools out there for debugging, but since I usually use visual studio code, I also debug the application with it.<br>\nFirst we need to add a debug script to our backend package.json \n```json\n...\n\"scripts\": {\n    \"start\": \"node ./bin/www\",\n    \"dev\": \"nodemon ./bin/www\",\n    \"debug\": \"node --inspect-brk=0.0.0.0:9229 ./bin/www\"\n  },\n...\n```\n\nNext, lets change the command that starts the backend app in docker-compose file<br>\n~/smart-house/docker-compose.yml\n```yml\n...\nsmart-house-be:\n    build: ./be\n    command: npm run debug\n    volumes:\n      - ./be:/usr/src/project\n...\n```\n Finally lets add a configuration file to our visual studio code<br>\n ~/smart-house/.vscode/launch.json\n```json\n{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"docker\",\n            \"type\": \"node\",\n            \"request\": \"attach\",\n            \"port\": 9229,\n            \"address\": \"127.0.0.1\",\n            \"restart\": true,\n            \"sourceMaps\": false,\n            \"localRoot\": \"${workspaceRoot}/be\",\n            \"remoteRoot\": \"/usr/src/project\",\n            \"outFiles\": [],\n            \"protocol\": \"inspector\"\n        }\n    ]\n}\n```\nNext do the `sudo docker-compose down`, and `sudo docker-compose up`, and start a debugging session in your visual studio code.\n<img src=\"/img/debug.png\">\n\n## Git repository\nThe Dockerized version of the app built in this tutorial is available in a github repo, on the [2-mean-app-docker](https://github.com/andreisbitnev/smart-house/tree/2-mean-app-docker) branch. You can git clone it with\n```bash\ngit clone -b 2-mean-app-docker https://github.com/andreisbitnev/smart-house.git\n```","slug":"2-mean-docker","published":1,"updated":"2018-03-05T11:36:43.812Z","_id":"cje8hh2b900010mlwalgrnsue","comments":1,"photos":[],"link":"","content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>&nbsp; In this tutorial, we will configure Docker containers for the MEAN app, we created in the previous blog post <a href=\"/2018/02/22/1-mean-app/\">1-Angular 5 MEAN app</a>. Using Docker in development as well as in production has a lot of advantages:</p>\n<ul><br><li>The project will run in the same environment during development as well as in production. No matter what hardware or operating system is used, Docker containers will behave the same on all machines.</li><br><li>Deployment process will be a lot quicker and less painfull</li><br><li>Setting up the project on the developers machine takes only a few minutes, and as easy as running one command in the terminal</li><br></ul>\n\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><p>To run any docker container, <a href=\"https://docs.docker.com/install/#time-based-release-schedule\" target=\"_blank\" rel=\"noopener\">Docker</a> must first be installed on your system. Just choose your operating system, and follow the installation instructions. Use the CE version!<br><br>In this tutorial we will also use the docker-compose, if you`re using <b>Docker for windows</b> or <b>Docker for mac</b>, it is already installed with the package. Linux users should install it separately, here`s a <a href=\"https://docs.docker.com/compose/install/\" target=\"_blank\" rel=\"noopener\">link</a><br></p>\n<p>As stated above, we will be building Docker containers for the MEAN app created in the previous tutorial. To get the app clone it from the <a href=\"https://github.com/andreisbitnev/smart-house/tree/1-mean-app-base\" target=\"_blank\" rel=\"noopener\">github repo</a><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> -b 1-mean-app-base https://github.com/andreisbitnev/smart-house.git</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Small-changes-to-the-code\"><a href=\"#Small-changes-to-the-code\" class=\"headerlink\" title=\"Small changes to the code\"></a>Small changes to the code</h2><p>Before we start creating our docker containers, we need to make some changes to the code. Go to ~/smart-house/be/app.js and modify the mongodb connection url<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">mongoose.connect(<span class=\"string\">'mongodb://mongodb/test'</span>);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Tip: The right way to communicate between the containers is by using their names instead of an ip address. Although it is possible for example to send a request from frontend to backend using <code>localhost:3000/test</code>, but it is usually not possible to access the database containers in the same way.</p>\n</blockquote>\n<p>We also need to modify the ~/smart-house/fe/package.json file. Change the dev script to</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"string\">\"dev\"</span>: <span class=\"string\">\"ng serve --host 0.0.0.0\"</span>,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>The default host for angular cli dev server is <code>localhost</code>, here we set it to <code>0.0.0.0</code>, for the app to be accessible outside the container.<br></p>\n<p>Let`s add a dev script to the backend package.json file<br><br>~/smart-house/be/package.json<br><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">    \"start\": \"node ./bin/www\",</span><br><span class=\"line\">    \"dev\": \"nodemon ./bin/www\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Dockerfile-for-the-backend-app\"><a href=\"#Dockerfile-for-the-backend-app\" class=\"headerlink\" title=\"Dockerfile for the backend app\"></a>Dockerfile for the backend app</h2><p>Docker containers are built from images. You can either use an already existing image, or create your own. To create a new image, Dockerfile is used, which is basically a blueprint for the image. There we specify all the tools needed to be set up for the app to run, as well as copy all the project files.<br>Let`s first create a Dockerfile for the backend app. Go to ~/smart-house/be and create a new Docker file<br><br>~/smart-house/be/Dockerfile<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> node:<span class=\"number\">9</span>-alpine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /usr/src/project/</span></span><br><span class=\"line\"><span class=\"bash\">COPY . .</span></span><br><span class=\"line\"><span class=\"bash\">RUN rm Dockerfile</span></span><br><span class=\"line\"><span class=\"bash\">RUN npm install -g nodemon \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; npm install</span></span><br><span class=\"line\"><span class=\"bash\">EXPOSE 9229</span></span><br><span class=\"line\"><span class=\"bash\">CMD [<span class=\"string\">\"npm\"</span>, <span class=\"string\">\"run\"</span>, <span class=\"string\">\"dev\"</span>]</span></span><br></pre></td></tr></table></figure></p>\n<p>Let`s go line by line and see what each line do.<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> node:<span class=\"number\">9</span>-alpine</span><br></pre></td></tr></table></figure></p>\n<p>Here we specify the base image for the new image. <code>node</code> - is the name of the image, and <code>9-alpine</code> is the tag, or the version so to say.<br>Here we are using the alpine distribution of linux, which has node.js version 9.6.1 installed on it. </p>\n<blockquote>\n<p>Tip: alpine - is a very lightweight linux distribution, which doesn`t have a lot of tools installed, like for example ubuntu has. But it has everything needed to run an express or angular app, and the image weighs only <b>68 MB</b>, compared to ubuntu image - <b>679 MB</b></p>\n</blockquote>\n<blockquote>\n<p>Tip: You can check out other available images to build from on <a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">hub.docker.com</a>.</p>\n</blockquote>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /usr/src/project/</span></span><br></pre></td></tr></table></figure>\n<p>Here we set up the working directory for the project inside the Docker image. It is basically the same as <code>cd /usr/src/project/</code>, but the directories will get created if they don`t exist.<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> . .</span></span><br></pre></td></tr></table></figure></p>\n<p>Here we copy everything from the directory Dockerfile is in (~/smart-house/be) to the working directory in the image (/usr/src/project/)<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> rm Dockerfile</span></span><br></pre></td></tr></table></figure></p>\n<p>Here we just remove the unnecessary files. Another option is not to copy everything in the previous step, but copy only the needed files one by one.<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> npm install -g nodemon \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; npm install</span></span><br></pre></td></tr></table></figure></p>\n<p>Here we install <a href=\"https://github.com/remy/nodemon\" target=\"_blank\" rel=\"noopener\">nodemon</a> globally to our image, to later use it in development. And we also install the package dependencies.<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">9229</span></span><br></pre></td></tr></table></figure></p>\n<p>Here we expose the 9229 port, which can then be used to debug the application.<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [<span class=\"string\">\"nodemon\"</span>, <span class=\"string\">\"bin/www\"</span>]</span></span><br></pre></td></tr></table></figure></p>\n<p>This is the command, that will be run when a container, built from the image, starts. We want to run the server with nodemon to be able to make changes, without the need to restart the container<br></p>\n<h2 id=\"Dockerfile-for-the-frontend-app\"><a href=\"#Dockerfile-for-the-frontend-app\" class=\"headerlink\" title=\"Dockerfile for the frontend app\"></a>Dockerfile for the frontend app</h2><p>Let`s now create a Dockerfile for the frontend app. Go to ~/smart-house/fe and create a new Docker file. It will be basically the same as the previous one, with some small changes.<br><br>~/smart-house/fe/Dockerfile<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> node:<span class=\"number\">9</span>-alpine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /usr/src/project/</span></span><br><span class=\"line\"><span class=\"bash\">COPY . .</span></span><br><span class=\"line\"><span class=\"bash\">RUN rm Dockerfile \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; npm install -g @angular/cli --unsafe \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; npm install</span></span><br><span class=\"line\"><span class=\"bash\">EXPOSE 4200</span></span><br><span class=\"line\"><span class=\"bash\">CMD [<span class=\"string\">\"npm\"</span>, <span class=\"string\">\"run\"</span>, <span class=\"string\">\"dev\"</span>]</span></span><br></pre></td></tr></table></figure></p>\n<p>We don`t need a nodemon for an angular app, but we do need angular cli<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\">&amp;&amp; npm install -g @angular/cli --unsafe \\</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Tip: the –unsafe tag is a workaround, needed to install the angular cli inside the Docker image. There is an open <a href=\"https://github.com/angular/angular-cli/issues/7389\" target=\"_blank\" rel=\"noopener\">bug report</a> on the issue. This workaround is the cleanest from currently suggested.</p>\n</blockquote>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">4200</span></span><br></pre></td></tr></table></figure>\n<p>Here we expose the port, that will be used to serve the application.</p>\n<h2 id=\"Building-the-images\"><a href=\"#Building-the-images\" class=\"headerlink\" title=\"Building the images\"></a>Building the images</h2><p>We can now build our images, and create Docker containers from them. We will also need a mongodb container to store our data. If you have not yet created it in the previous tutorial, do it by running<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker container run --name mongodb -d mongo</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Tip: If you`re on a windows environment, be sure to run the command in powershell</p>\n</blockquote>\n<p>Here we simply specify the name of the container - <b>mongodb</b>, and the image to build it from - <b>mongo</b>, by default the <b>:latest</b> tag is used, so it`s the same as mongo:latest. We also specify that the process should run in detached mode <b>-d</b>, and setup port forwarding with <b>-p</b><br><br>Now let`s build a backend image.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker image build -t sm-be ./be</span><br></pre></td></tr></table></figure></p>\n<p>I`m running this command from ~/smarthouse directory, so I specify the relative path <code>./be</code> to the Dockerfile directory I want to build from. <code>-t sm-be</code> - is the Tag, or the name of the image.</p>\n<blockquote>\n<p>Tip: Now you can run the <code>sudo docker image ls</code> to see the list of all available images, and sm-be should be there</p>\n</blockquote>\n<p>Let`s do the same for the frontend image<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker image build -t sm-fe ./fe</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Creating-containers\"><a href=\"#Creating-containers\" class=\"headerlink\" title=\"Creating containers\"></a>Creating containers</h2><p>To create the backend app container run the next command<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker container run -d --name smart-house-be -p 3000:3000 --link mongodb:mongodb -v <span class=\"string\">\"<span class=\"variable\">$(pwd)</span>\"</span>/be:/usr/src/project -v /usr/src/project/node_modules sm-be</span><br></pre></td></tr></table></figure></p>\n<p><code>-d</code> - means detached mode, <code>--name smart-house-be</code> - is the name of the container, <code>-p 3000:3000</code> - port forwarding, our network port : containers port.<br><br><code>-v &quot;$(pwd)&quot;/be:/usr/src/project</code> - here we map our local volume ~/smart-house/be to containers /usr/src/project. So now whatever changes we make in our project folder will automatically apply to container.<br><br><code>-v /usr/src/project/node_modules</code> - here we specify a new volume for node_modules. In the previous step we mapped our local project folder to the project folder inside the container. Since node_modules is also located inside the project folder, the container will look for it in our local environment. This is not the best choise, because our local environment might be different from the one inside the container. So we want node_modules to be maintained inside the container, and we don`t even need it in our local environment.<br><br><code>--link mongodb:mongodb</code> is a link to the mongodb container.<br><code>sm-be</code> is the name of the image we want to create the container from.</p>\n<p>Let`s now create the frontend app container<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker container run --name smart-house-fe -p 4200:4200 -d -v <span class=\"string\">\"<span class=\"variable\">$(pwd)</span>\"</span>/fe:/usr/src/project -v /usr/src/project/node_modules sm-fe</span><br></pre></td></tr></table></figure></p>\n<p>Now open in the browser <a href=\"http://localhost:4200/\">localhost:4200</a>, you should see the app working.<br><img src=\"/img/finished.png\"><br>You can now make any changes in the angular app, and the dev server will update them automatically. You can also make changes in the backend app, and the nodemon will update them automatically.</p>\n<blockquote>\n<p>Tip: to start and stop any comtainer just use <code>sudo docker container start &lt;container_name&gt;</code> or <code>sudo docker container stop &lt;container_name&gt;</code></p>\n</blockquote>\n<h2 id=\"Using-docker-compose\"><a href=\"#Using-docker-compose\" class=\"headerlink\" title=\"Using docker-compose\"></a>Using docker-compose</h2><p>We have succesfully built our images and created containers for our MEAN app, but now we need to start and stop them one by one. Also if for example other members of the team were to use our new build, they would have to enter all of those commands listed above manually. It would be great to automate the process. That`s where <b>docker-compose</b> comes in. Docker-compose simplifies the build process of group of containers, that are used together. Go to ~/smart-house directory and create a docker-compose.yml file<br><br>~/smart-house/docker-compose.yml<br><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  mongodb:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">mongo</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"attr\">      - mongo-volume:</span><span class=\"string\">/home/node</span></span><br><span class=\"line\"><span class=\"attr\">  smart-house-fe:</span></span><br><span class=\"line\"><span class=\"attr\">    build:</span> <span class=\"string\">./fe</span></span><br><span class=\"line\"><span class=\"attr\">    command:</span> <span class=\"string\">npm</span> <span class=\"string\">run</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">./fe:/usr/src/project</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/usr/src/project/node_modules</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">4200</span><span class=\"string\">:4200</span></span><br><span class=\"line\"><span class=\"attr\">  smart-house-be:</span></span><br><span class=\"line\"><span class=\"attr\">    build:</span> <span class=\"string\">./be</span></span><br><span class=\"line\"><span class=\"attr\">    command:</span> <span class=\"string\">npm</span> <span class=\"string\">run</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">./be:/usr/src/project</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/usr/src/project/node_modules</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">3000</span><span class=\"string\">:3000</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">9229</span><span class=\"string\">:9229</span></span><br><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\"><span class=\"attr\">  mongo-volume:</span></span><br></pre></td></tr></table></figure></p>\n<p>From the first look, you can see that the file basically lists everything we specified in the scripts above, but now all the information is structured. Lets go line by line and see what each line does.<br><code>version: &#39;2&#39;</code> - the version of docker-compose file, the latest is 3.1,<br><code>services</code> - contains all the containers, that need to be created,<br><code>mongodb, smart-house-fe, smart-house-be</code> - the names of containers,<br><code>image</code> - the base image to use,<br><code>volumes</code> - a list of volumes for each container. As you may have noticed, we added a volume to our mongodb container called <code>mongo-volume</code>. It is always a good idea to add a named volume to the database. If you later on remove the container the volume will still exist, and you can attach it to a new container. This way the data stored in the database will not be lost,<br><code>build</code> - relative path to the Dockerfile, from which the container should be built,<br><code>command</code> - although we specify a command to run on container startup, we can rewrite it here.<br><code>volumes</code> - a list of named volumes to be created.<br><br>Let`s now remove the containers and images we previously created and build everything again using just one command. Remove the smart-house-be container<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker container rm -v -f smart-house-be</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Tip: <code>-v</code> - is to remove also the volumes attached to the container, <code>-f</code> - is to force it, if container is still running</p>\n</blockquote>\n<p>and the smart-house-fe<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker container rm -v -f smart-house-fe</span><br></pre></td></tr></table></figure></p>\n<p>and the mongodb<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker container rm -v -f mongodb</span><br></pre></td></tr></table></figure></p>\n<p>Now the images<br><br><code>sudo docker image rm sm-be</code> and <code>sudo docker image rm sm-fe</code><br><br><!-- Before we build everything once again, let\\`s make one small change to che project. You may have noticed, that in the docker-compose.yml we no longer open up the 3000 port on the backend container. It is a better practice to call one container from another using their names, and not exposing ports to the outer network. This way our backend container won\\`t be accessible outside the  --><br>To build everything again just go to ~/smart-house and run <code>sudo docker-compose up</code>. Everything should be working as before</p>\n<blockquote>\n<p>Tip: You can also run it in detached mode <code>sudo docker-compose up -d</code>. To stop all the containers, run <code>sudo docker-compose down</code>. To remove all the volumes attached to the containers, run <code>sudo docker-compose down -v</code></p>\n</blockquote>\n<h2 id=\"Debugging-node-in-visual-studio-code\"><a href=\"#Debugging-node-in-visual-studio-code\" class=\"headerlink\" title=\"Debugging node in visual studio code.\"></a>Debugging node in visual studio code.</h2><p>There is a lot of tools out there for debugging, but since I usually use visual studio code, I also debug the application with it.<br><br>First we need to add a debug script to our backend package.json<br><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">    \"start\": \"node ./bin/www\",</span><br><span class=\"line\">    \"dev\": \"nodemon ./bin/www\",</span><br><span class=\"line\">    \"debug\": \"node --inspect-brk=0.0.0.0:9229 ./bin/www\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p>Next, lets change the command that starts the backend app in docker-compose file<br><br>~/smart-house/docker-compose.yml<br><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"attr\">smart-house-be:</span></span><br><span class=\"line\"><span class=\"attr\">    build:</span> <span class=\"string\">./be</span></span><br><span class=\"line\"><span class=\"attr\">    command:</span> <span class=\"string\">npm</span> <span class=\"string\">run</span> <span class=\"string\">debug</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">./be:/usr/src/project</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br></pre></td></tr></table></figure></p>\n<p> Finally lets add a configuration file to our visual studio code<br><br> ~/smart-house/.vscode/launch.json<br><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    // Use IntelliSense to learn about possible attributes.</span><br><span class=\"line\">    // Hover to view descriptions of existing attributes.</span><br><span class=\"line\">    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class=\"line\">    \"version\": \"0.2.0\",</span><br><span class=\"line\">    \"configurations\": [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"docker\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"request\"</span>: <span class=\"string\">\"attach\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"port\"</span>: <span class=\"number\">9229</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"address\"</span>: <span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"restart\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"sourceMaps\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"localRoot\"</span>: <span class=\"string\">\"$&#123;workspaceRoot&#125;/be\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"remoteRoot\"</span>: <span class=\"string\">\"/usr/src/project\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"outFiles\"</span>: [],</span><br><span class=\"line\">            <span class=\"attr\">\"protocol\"</span>: <span class=\"string\">\"inspector\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Next do the <code>sudo docker-compose down</code>, and <code>sudo docker-compose up</code>, and start a debugging session in your visual studio code.<br><img src=\"/img/debug.png\"></p>\n<h2 id=\"Git-repository\"><a href=\"#Git-repository\" class=\"headerlink\" title=\"Git repository\"></a>Git repository</h2><p>The Dockerized version of the app built in this tutorial is available in a github repo, on the <a href=\"https://github.com/andreisbitnev/smart-house/tree/2-mean-app-docker\" target=\"_blank\" rel=\"noopener\">2-mean-app-docker</a> branch. You can git clone it with<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> -b 2-mean-app-docker https://github.com/andreisbitnev/smart-house.git</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>&nbsp; In this tutorial, we will configure Docker containers for the MEAN app, we created in the previous blog post <a href=\"/2018/02/22/1-mean-app/\">1-Angular 5 MEAN app</a>. Using Docker in development as well as in production has a lot of advantages:</p>\n<ul><br><li>The project will run in the same environment during development as well as in production. No matter what hardware or operating system is used, Docker containers will behave the same on all machines.</li><br><li>Deployment process will be a lot quicker and less painfull</li><br><li>Setting up the project on the developers machine takes only a few minutes, and as easy as running one command in the terminal</li><br></ul>\n\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><p>To run any docker container, <a href=\"https://docs.docker.com/install/#time-based-release-schedule\" target=\"_blank\" rel=\"noopener\">Docker</a> must first be installed on your system. Just choose your operating system, and follow the installation instructions. Use the CE version!<br><br>In this tutorial we will also use the docker-compose, if you`re using <b>Docker for windows</b> or <b>Docker for mac</b>, it is already installed with the package. Linux users should install it separately, here`s a <a href=\"https://docs.docker.com/compose/install/\" target=\"_blank\" rel=\"noopener\">link</a><br></p>\n<p>As stated above, we will be building Docker containers for the MEAN app created in the previous tutorial. To get the app clone it from the <a href=\"https://github.com/andreisbitnev/smart-house/tree/1-mean-app-base\" target=\"_blank\" rel=\"noopener\">github repo</a><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> -b 1-mean-app-base https://github.com/andreisbitnev/smart-house.git</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Small-changes-to-the-code\"><a href=\"#Small-changes-to-the-code\" class=\"headerlink\" title=\"Small changes to the code\"></a>Small changes to the code</h2><p>Before we start creating our docker containers, we need to make some changes to the code. Go to ~/smart-house/be/app.js and modify the mongodb connection url<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">mongoose.connect(<span class=\"string\">'mongodb://mongodb/test'</span>);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Tip: The right way to communicate between the containers is by using their names instead of an ip address. Although it is possible for example to send a request from frontend to backend using <code>localhost:3000/test</code>, but it is usually not possible to access the database containers in the same way.</p>\n</blockquote>\n<p>We also need to modify the ~/smart-house/fe/package.json file. Change the dev script to</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"string\">\"dev\"</span>: <span class=\"string\">\"ng serve --host 0.0.0.0\"</span>,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>The default host for angular cli dev server is <code>localhost</code>, here we set it to <code>0.0.0.0</code>, for the app to be accessible outside the container.<br></p>\n<p>Let`s add a dev script to the backend package.json file<br><br>~/smart-house/be/package.json<br><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">    \"start\": \"node ./bin/www\",</span><br><span class=\"line\">    \"dev\": \"nodemon ./bin/www\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Dockerfile-for-the-backend-app\"><a href=\"#Dockerfile-for-the-backend-app\" class=\"headerlink\" title=\"Dockerfile for the backend app\"></a>Dockerfile for the backend app</h2><p>Docker containers are built from images. You can either use an already existing image, or create your own. To create a new image, Dockerfile is used, which is basically a blueprint for the image. There we specify all the tools needed to be set up for the app to run, as well as copy all the project files.<br>Let`s first create a Dockerfile for the backend app. Go to ~/smart-house/be and create a new Docker file<br><br>~/smart-house/be/Dockerfile<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> node:<span class=\"number\">9</span>-alpine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /usr/src/project/</span></span><br><span class=\"line\"><span class=\"bash\">COPY . .</span></span><br><span class=\"line\"><span class=\"bash\">RUN rm Dockerfile</span></span><br><span class=\"line\"><span class=\"bash\">RUN npm install -g nodemon \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; npm install</span></span><br><span class=\"line\"><span class=\"bash\">EXPOSE 9229</span></span><br><span class=\"line\"><span class=\"bash\">CMD [<span class=\"string\">\"npm\"</span>, <span class=\"string\">\"run\"</span>, <span class=\"string\">\"dev\"</span>]</span></span><br></pre></td></tr></table></figure></p>\n<p>Let`s go line by line and see what each line do.<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> node:<span class=\"number\">9</span>-alpine</span><br></pre></td></tr></table></figure></p>\n<p>Here we specify the base image for the new image. <code>node</code> - is the name of the image, and <code>9-alpine</code> is the tag, or the version so to say.<br>Here we are using the alpine distribution of linux, which has node.js version 9.6.1 installed on it. </p>\n<blockquote>\n<p>Tip: alpine - is a very lightweight linux distribution, which doesn`t have a lot of tools installed, like for example ubuntu has. But it has everything needed to run an express or angular app, and the image weighs only <b>68 MB</b>, compared to ubuntu image - <b>679 MB</b></p>\n</blockquote>\n<blockquote>\n<p>Tip: You can check out other available images to build from on <a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">hub.docker.com</a>.</p>\n</blockquote>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /usr/src/project/</span></span><br></pre></td></tr></table></figure>\n<p>Here we set up the working directory for the project inside the Docker image. It is basically the same as <code>cd /usr/src/project/</code>, but the directories will get created if they don`t exist.<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> . .</span></span><br></pre></td></tr></table></figure></p>\n<p>Here we copy everything from the directory Dockerfile is in (~/smart-house/be) to the working directory in the image (/usr/src/project/)<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> rm Dockerfile</span></span><br></pre></td></tr></table></figure></p>\n<p>Here we just remove the unnecessary files. Another option is not to copy everything in the previous step, but copy only the needed files one by one.<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> npm install -g nodemon \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; npm install</span></span><br></pre></td></tr></table></figure></p>\n<p>Here we install <a href=\"https://github.com/remy/nodemon\" target=\"_blank\" rel=\"noopener\">nodemon</a> globally to our image, to later use it in development. And we also install the package dependencies.<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">9229</span></span><br></pre></td></tr></table></figure></p>\n<p>Here we expose the 9229 port, which can then be used to debug the application.<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [<span class=\"string\">\"nodemon\"</span>, <span class=\"string\">\"bin/www\"</span>]</span></span><br></pre></td></tr></table></figure></p>\n<p>This is the command, that will be run when a container, built from the image, starts. We want to run the server with nodemon to be able to make changes, without the need to restart the container<br></p>\n<h2 id=\"Dockerfile-for-the-frontend-app\"><a href=\"#Dockerfile-for-the-frontend-app\" class=\"headerlink\" title=\"Dockerfile for the frontend app\"></a>Dockerfile for the frontend app</h2><p>Let`s now create a Dockerfile for the frontend app. Go to ~/smart-house/fe and create a new Docker file. It will be basically the same as the previous one, with some small changes.<br><br>~/smart-house/fe/Dockerfile<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> node:<span class=\"number\">9</span>-alpine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /usr/src/project/</span></span><br><span class=\"line\"><span class=\"bash\">COPY . .</span></span><br><span class=\"line\"><span class=\"bash\">RUN rm Dockerfile \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; npm install -g @angular/cli --unsafe \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; npm install</span></span><br><span class=\"line\"><span class=\"bash\">EXPOSE 4200</span></span><br><span class=\"line\"><span class=\"bash\">CMD [<span class=\"string\">\"npm\"</span>, <span class=\"string\">\"run\"</span>, <span class=\"string\">\"dev\"</span>]</span></span><br></pre></td></tr></table></figure></p>\n<p>We don`t need a nodemon for an angular app, but we do need angular cli<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\">&amp;&amp; npm install -g @angular/cli --unsafe \\</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Tip: the –unsafe tag is a workaround, needed to install the angular cli inside the Docker image. There is an open <a href=\"https://github.com/angular/angular-cli/issues/7389\" target=\"_blank\" rel=\"noopener\">bug report</a> on the issue. This workaround is the cleanest from currently suggested.</p>\n</blockquote>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">4200</span></span><br></pre></td></tr></table></figure>\n<p>Here we expose the port, that will be used to serve the application.</p>\n<h2 id=\"Building-the-images\"><a href=\"#Building-the-images\" class=\"headerlink\" title=\"Building the images\"></a>Building the images</h2><p>We can now build our images, and create Docker containers from them. We will also need a mongodb container to store our data. If you have not yet created it in the previous tutorial, do it by running<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker container run --name mongodb -d mongo</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Tip: If you`re on a windows environment, be sure to run the command in powershell</p>\n</blockquote>\n<p>Here we simply specify the name of the container - <b>mongodb</b>, and the image to build it from - <b>mongo</b>, by default the <b>:latest</b> tag is used, so it`s the same as mongo:latest. We also specify that the process should run in detached mode <b>-d</b>, and setup port forwarding with <b>-p</b><br><br>Now let`s build a backend image.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker image build -t sm-be ./be</span><br></pre></td></tr></table></figure></p>\n<p>I`m running this command from ~/smarthouse directory, so I specify the relative path <code>./be</code> to the Dockerfile directory I want to build from. <code>-t sm-be</code> - is the Tag, or the name of the image.</p>\n<blockquote>\n<p>Tip: Now you can run the <code>sudo docker image ls</code> to see the list of all available images, and sm-be should be there</p>\n</blockquote>\n<p>Let`s do the same for the frontend image<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker image build -t sm-fe ./fe</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Creating-containers\"><a href=\"#Creating-containers\" class=\"headerlink\" title=\"Creating containers\"></a>Creating containers</h2><p>To create the backend app container run the next command<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker container run -d --name smart-house-be -p 3000:3000 --link mongodb:mongodb -v <span class=\"string\">\"<span class=\"variable\">$(pwd)</span>\"</span>/be:/usr/src/project -v /usr/src/project/node_modules sm-be</span><br></pre></td></tr></table></figure></p>\n<p><code>-d</code> - means detached mode, <code>--name smart-house-be</code> - is the name of the container, <code>-p 3000:3000</code> - port forwarding, our network port : containers port.<br><br><code>-v &quot;$(pwd)&quot;/be:/usr/src/project</code> - here we map our local volume ~/smart-house/be to containers /usr/src/project. So now whatever changes we make in our project folder will automatically apply to container.<br><br><code>-v /usr/src/project/node_modules</code> - here we specify a new volume for node_modules. In the previous step we mapped our local project folder to the project folder inside the container. Since node_modules is also located inside the project folder, the container will look for it in our local environment. This is not the best choise, because our local environment might be different from the one inside the container. So we want node_modules to be maintained inside the container, and we don`t even need it in our local environment.<br><br><code>--link mongodb:mongodb</code> is a link to the mongodb container.<br><code>sm-be</code> is the name of the image we want to create the container from.</p>\n<p>Let`s now create the frontend app container<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker container run --name smart-house-fe -p 4200:4200 -d -v <span class=\"string\">\"<span class=\"variable\">$(pwd)</span>\"</span>/fe:/usr/src/project -v /usr/src/project/node_modules sm-fe</span><br></pre></td></tr></table></figure></p>\n<p>Now open in the browser <a href=\"http://localhost:4200/\">localhost:4200</a>, you should see the app working.<br><img src=\"/img/finished.png\"><br>You can now make any changes in the angular app, and the dev server will update them automatically. You can also make changes in the backend app, and the nodemon will update them automatically.</p>\n<blockquote>\n<p>Tip: to start and stop any comtainer just use <code>sudo docker container start &lt;container_name&gt;</code> or <code>sudo docker container stop &lt;container_name&gt;</code></p>\n</blockquote>\n<h2 id=\"Using-docker-compose\"><a href=\"#Using-docker-compose\" class=\"headerlink\" title=\"Using docker-compose\"></a>Using docker-compose</h2><p>We have succesfully built our images and created containers for our MEAN app, but now we need to start and stop them one by one. Also if for example other members of the team were to use our new build, they would have to enter all of those commands listed above manually. It would be great to automate the process. That`s where <b>docker-compose</b> comes in. Docker-compose simplifies the build process of group of containers, that are used together. Go to ~/smart-house directory and create a docker-compose.yml file<br><br>~/smart-house/docker-compose.yml<br><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  mongodb:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">mongo</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"attr\">      - mongo-volume:</span><span class=\"string\">/home/node</span></span><br><span class=\"line\"><span class=\"attr\">  smart-house-fe:</span></span><br><span class=\"line\"><span class=\"attr\">    build:</span> <span class=\"string\">./fe</span></span><br><span class=\"line\"><span class=\"attr\">    command:</span> <span class=\"string\">npm</span> <span class=\"string\">run</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">./fe:/usr/src/project</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/usr/src/project/node_modules</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">4200</span><span class=\"string\">:4200</span></span><br><span class=\"line\"><span class=\"attr\">  smart-house-be:</span></span><br><span class=\"line\"><span class=\"attr\">    build:</span> <span class=\"string\">./be</span></span><br><span class=\"line\"><span class=\"attr\">    command:</span> <span class=\"string\">npm</span> <span class=\"string\">run</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">./be:/usr/src/project</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/usr/src/project/node_modules</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">3000</span><span class=\"string\">:3000</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">9229</span><span class=\"string\">:9229</span></span><br><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\"><span class=\"attr\">  mongo-volume:</span></span><br></pre></td></tr></table></figure></p>\n<p>From the first look, you can see that the file basically lists everything we specified in the scripts above, but now all the information is structured. Lets go line by line and see what each line does.<br><code>version: &#39;2&#39;</code> - the version of docker-compose file, the latest is 3.1,<br><code>services</code> - contains all the containers, that need to be created,<br><code>mongodb, smart-house-fe, smart-house-be</code> - the names of containers,<br><code>image</code> - the base image to use,<br><code>volumes</code> - a list of volumes for each container. As you may have noticed, we added a volume to our mongodb container called <code>mongo-volume</code>. It is always a good idea to add a named volume to the database. If you later on remove the container the volume will still exist, and you can attach it to a new container. This way the data stored in the database will not be lost,<br><code>build</code> - relative path to the Dockerfile, from which the container should be built,<br><code>command</code> - although we specify a command to run on container startup, we can rewrite it here.<br><code>volumes</code> - a list of named volumes to be created.<br><br>Let`s now remove the containers and images we previously created and build everything again using just one command. Remove the smart-house-be container<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker container rm -v -f smart-house-be</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Tip: <code>-v</code> - is to remove also the volumes attached to the container, <code>-f</code> - is to force it, if container is still running</p>\n</blockquote>\n<p>and the smart-house-fe<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker container rm -v -f smart-house-fe</span><br></pre></td></tr></table></figure></p>\n<p>and the mongodb<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker container rm -v -f mongodb</span><br></pre></td></tr></table></figure></p>\n<p>Now the images<br><br><code>sudo docker image rm sm-be</code> and <code>sudo docker image rm sm-fe</code><br><br><!-- Before we build everything once again, let\\`s make one small change to che project. You may have noticed, that in the docker-compose.yml we no longer open up the 3000 port on the backend container. It is a better practice to call one container from another using their names, and not exposing ports to the outer network. This way our backend container won\\`t be accessible outside the  --><br>To build everything again just go to ~/smart-house and run <code>sudo docker-compose up</code>. Everything should be working as before</p>\n<blockquote>\n<p>Tip: You can also run it in detached mode <code>sudo docker-compose up -d</code>. To stop all the containers, run <code>sudo docker-compose down</code>. To remove all the volumes attached to the containers, run <code>sudo docker-compose down -v</code></p>\n</blockquote>\n<h2 id=\"Debugging-node-in-visual-studio-code\"><a href=\"#Debugging-node-in-visual-studio-code\" class=\"headerlink\" title=\"Debugging node in visual studio code.\"></a>Debugging node in visual studio code.</h2><p>There is a lot of tools out there for debugging, but since I usually use visual studio code, I also debug the application with it.<br><br>First we need to add a debug script to our backend package.json<br><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">    \"start\": \"node ./bin/www\",</span><br><span class=\"line\">    \"dev\": \"nodemon ./bin/www\",</span><br><span class=\"line\">    \"debug\": \"node --inspect-brk=0.0.0.0:9229 ./bin/www\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p>Next, lets change the command that starts the backend app in docker-compose file<br><br>~/smart-house/docker-compose.yml<br><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"attr\">smart-house-be:</span></span><br><span class=\"line\"><span class=\"attr\">    build:</span> <span class=\"string\">./be</span></span><br><span class=\"line\"><span class=\"attr\">    command:</span> <span class=\"string\">npm</span> <span class=\"string\">run</span> <span class=\"string\">debug</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">./be:/usr/src/project</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br></pre></td></tr></table></figure></p>\n<p> Finally lets add a configuration file to our visual studio code<br><br> ~/smart-house/.vscode/launch.json<br><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    // Use IntelliSense to learn about possible attributes.</span><br><span class=\"line\">    // Hover to view descriptions of existing attributes.</span><br><span class=\"line\">    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class=\"line\">    \"version\": \"0.2.0\",</span><br><span class=\"line\">    \"configurations\": [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"docker\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"request\"</span>: <span class=\"string\">\"attach\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"port\"</span>: <span class=\"number\">9229</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"address\"</span>: <span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"restart\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"sourceMaps\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"localRoot\"</span>: <span class=\"string\">\"$&#123;workspaceRoot&#125;/be\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"remoteRoot\"</span>: <span class=\"string\">\"/usr/src/project\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"outFiles\"</span>: [],</span><br><span class=\"line\">            <span class=\"attr\">\"protocol\"</span>: <span class=\"string\">\"inspector\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Next do the <code>sudo docker-compose down</code>, and <code>sudo docker-compose up</code>, and start a debugging session in your visual studio code.<br><img src=\"/img/debug.png\"></p>\n<h2 id=\"Git-repository\"><a href=\"#Git-repository\" class=\"headerlink\" title=\"Git repository\"></a>Git repository</h2><p>The Dockerized version of the app built in this tutorial is available in a github repo, on the <a href=\"https://github.com/andreisbitnev/smart-house/tree/2-mean-app-docker\" target=\"_blank\" rel=\"noopener\">2-mean-app-docker</a> branch. You can git clone it with<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> -b 2-mean-app-docker https://github.com/andreisbitnev/smart-house.git</span><br></pre></td></tr></table></figure></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cje8hh2b900010mlwalgrnsue","tag_id":"cjee5hjm90000zsd1woll0ry2","_id":"cjee5hjmb0001zsd1ijh6ux6y"},{"post_id":"cje8hh2b900010mlwalgrnsue","tag_id":"cjdzjfl6n0000qxlw9f07r3h5","_id":"cjee5hjmc0002zsd11m8mvjde"},{"post_id":"cje7koqvl0000h8lweuczghn4","tag_id":"cjdzjfl6n0000qxlw9f07r3h5","_id":"cjee5ka280000b4d1492cu99b"},{"post_id":"cje7koqvl0000h8lweuczghn4","tag_id":"cjdzjfl6o0001qxlw1zunv0c8","_id":"cjee5ka280001b4d1amjvv3ew"},{"post_id":"cje7koqvl0000h8lweuczghn4","tag_id":"cjdzjfl6p0002qxlwr5q6l58n","_id":"cjee5ka280002b4d1ww8ymsv1"},{"post_id":"cje7koqvl0000h8lweuczghn4","tag_id":"cjdzjfl6p0003qxlw1w0boxaw","_id":"cjee5ka280003b4d183v63v82"}],"Tag":[{"name":"Movies","_id":"cjdyw8rkv0000x7lwye563q08"},{"name":"Life","_id":"cjdyw8rky0001x7lwdqnoinb2"},{"name":"MEAN","_id":"cjdzjfl6n0000qxlw9f07r3h5"},{"name":"Angular 5","_id":"cjdzjfl6o0001qxlw1zunv0c8"},{"name":"Node.js","_id":"cjdzjfl6p0002qxlwr5q6l58n"},{"name":"Express","_id":"cjdzjfl6p0003qxlw1w0boxaw"},{"name":"Docker","_id":"cjee5hjm90000zsd1woll0ry2"}]}}